{"version":3,"sources":["strings.tsx","urls.tsx","store.tsx","backend.tsx","user/login_page.tsx","constants.tsx","utils/time_view.tsx","utils/utils.ts","post/post_list_view.tsx","utils/shared_components.tsx","user/user_page.tsx","mainpage/post_list_page.tsx","mainpage/homepage.tsx","user/user_bar_view.tsx","rich_text/spoiler_syntax.tsx","rich_text/sticker_indices.tsx","rich_text/sticker_syntax.tsx","rich_text/image_view.tsx","rich_text/code_view.tsx","rich_text/underline_syntax.tsx","rich_text/markdown_view.tsx","post/post_detail_page.tsx","mainpage/drawer.tsx","user/history_page.tsx","user/favorites_page.tsx","about/about.tsx","page_not_found/page_not_found.tsx","rich_text/sticker_plugin.tsx","rich_text/spoiler_plugin.tsx","post/post_editor.tsx","post/post_edit_pages.tsx","index.tsx"],"names":["Strings","translations","translate","message","formatMessage","key","replace","Urls","LocalUrls","userId","undefined","postId","posterOnly","replyId","userSlice","createSlice","name","initialState","reducers","updateUserStatus","state","action","payload","tokenSlice","localStorage","getItem","setToken","setItem","removeItem","store","configureStore","reducer","user","token","username","password","a","fetch","login","body","JSON","stringify","response","json","status","nickname","jwt","logout","dispatch","getToken","actions","removeToken","userOther","toString","params","post","URLSearchParams","Object","entries","reduce","prev","k","v","title","content","useStyles","makeStyles","theme","createStyles","list","padding","display","flexDirection","alignItems","margin","spacing","width","alert","justifySelf","LoginPage","props","classes","useTheme","useSelector","useDispatch","React","useState","setUsername","setPassword","loggingIn","setLoggingIn","loggedIn","setLoggedIn","errorMessage","setErrorMessage","handleClick","then","result","success","reason","className","to","Typography","variant","TextField","required","id","label","onChange","evt","target","value","type","onSubmit","Button","onClick","color","CircularProgress","size","style","Alert","severity","Constants","toShortTimeString","time","t","moment","today","format","date","month","year","toTimeString","TimeView","str","short","flatten","htmlString","length","substring","createHistoryEntryFromPostFull","lastRepliedNickname","lastReplyTime","updated","unix","reply","replyTime","lastRepliedTime","replyNickname","userNickname","createPostDigestFromHistoryEntry","entry","defaultSettings","orderByReplyTime","getPostListSettings","st","parse","backgroundColor","palette","background","paper","marginTop","overflow","textOverflow","lineBreak","marginLeft","marginRight","flex","fontSize","PostPreview","ListItem","postPreview","button","component","Link","ListItemText","primary","secondary","right","Fragment","verticalCentralize","PostListView","postPreviewList","first","i","posts","push","Divider","List","PagedPostsView","currentPage","setCurrentPage","maxPages","Math","max","ceil","pageStart","pageEnd","slice","justifyContent","Pagination","page","count","marginBottom","GoBack","history","goBack","ToolbarButtonGroup","ButtonGroup","clsx","boxSizing","lineHeight","buttonBar","alignSelf","flexWrap","KeyValueView","keyString","UserInfoPage","userInfo","userInfoOthers","setUserInfoOthers","isOther","match","useEffect","parseInt","authorized","userInfoToRender","Container","maxWidth","Skeleton","animation","height","created","minHeight","cursor","textDecoration","minWidth","text","paddingLeft","PageChangeControl","buttonList","current","textValue","setTextValue","isFinite","isNaN","min","left","large","pageChange","placeholder","inputMode","PostListViewPage","currentPosts","setPosts","postLoadingFailed","setPostLoadingFailed","postFailMessage","setPostFailMessage","userErrorMessage","setUserErrorMessage","open","setOpen","settings","setSettings","tempUserId","setTempUserId","setPage","reloadPosts","orderByReply","closeSettings","main","Collapse","in","settingsPanel","Card","CardContent","Switch","checked","setPostListSettings","defaultValue","Hidden","smUp","total","pageNumber","xsDown","middle","UnloggedInPage","HomePage","emptyState","setEmptyState","location","search","get","avatarIconButton","transition","contrastText","UserBarInfo","spoiler","border","borderColor","divider","tokenizeSpoiler","eat","silent","exec","spoilerSyntax","Parser","this","tokenizers","prototype","inlineTokenizers","methods","inlineMethods","splice","indexOf","SpoilerView","notInLink","locator","fromIndex","StickerDatabase","tokenizeSticker","stickerSyntax","sticker","StickerView","stickerPath","index","split","ns","stickers","url","stickerUrl","stickerAlt","w","h","x","y","default","borderStyle","borderWidth","ImageView","overSize","setOverSize","imageContainer","imageContainerClose","src","onLoad","imageElement","alt","imageOpenControl","code","CodeView","language","vs","customStyle","tokenizeUnderline","underlineSyntax","underline","UnderlineView","MarkdownView","escapeHtml","escapeHTML","plugins","renderers","image","imageReference","paddingBottom","textAlign","getContrastText","blue","paddingRight","position","overflowX","maxHeight","whiteSpace","borderRadius","boxShadow","red","ReplyView","displayHTML","setDisplayHTML","level","displayLength","setDisplayLength","selfFlatten","subReplies","setSubReplies","flattenReplies","replyTreeMap","base","base1","children","postContent","Avatar","repliedName","href","source","pathname","subReplyList","map","allReplies","replyListControlBar","PostView","forEach","replies","arr","PostPage","setMessage","postInfo","setPostInfo","fav","hasFavorites","favorite","setFavorite","loadPost","historyEntry","hist","obj","shift","unshift","pushViewHistory","removeFavorites","pushFavorites","drawerHeader","mixins","toolbar","verticalCenter","DrawerContents","ListItemIcon","HistoryPostView","historyList","getViewHistory","historyStatus","setHistoryStatus","HistoryPage","FavoritesPage","favoriteList","getFavoritesList","AboutPage","error","PageNotFoundPage","useDropMenuStyles","dropMenuWrap","top","zIndex","borderRightColor","borderBottomColor","Drop","handleClose","useCallback","e","stopPropagation","onClose","show","stickerPreview","StickerPlugin","onMouseEnter","onMouseLeave","editor","insertText","align","pluginName","SpoilerPlugin","getSelection","MdEditor","unuse","Plugins","FullScreen","use","postCreate","submitButtons","PostEditor","initialTitle","initialContent","setTempContent","h1","disabled","titleEditable","renderHTML","html","onFinish","PostSubmitPage","submitPost","PostEditPage","editPost","ReplyEditPage","editReply","ReplyPage","replyPost","App","createMuiTheme","drawerOpen","ThemeProvider","AppBar","Toolbar","IconButton","aria-label","setState","edge","Drawer","anchor","exact","path","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.deb02e34.chunk.js","sourcesContent":["export const Strings = {\n    \"api/illegal_json\": \"服务器返回了一个非法的 JSON\",\n    \"api/unknown_error\": \"未知的错误\",\n    \"api/ok\": \"ok\",\n\n    \"main/title\": \"清软论坛\",\n    \"main/not_logged_in\": \"未登录\",\n    \"main/go_homepage\": \"返回主页\",\n    \"main/go_back\": \"返回上一页\",\n\n    \"main/welcome_title\": \"欢迎来到清软论坛！\",\n    \"main/welcome_content\": \"你还没有登录！登录以查看精彩内容..\",\n    \"main/user_post_list\": \"{nickname} 的发帖记录\",\n    \"main/refresh\": \"刷新\",\n    \"main/favorite\": \"收藏\",\n    \"main/post_list\": \"帖子列表\",\n\n    \"main/drawer/login\": \"登录\",\n    \"main/drawer/user_center\": \"个人中心\",\n    \"main/drawer/post_list\": \"帖子列表\",\n    \"main/drawer/submit_post\": \"发帖\",\n    \"main/drawer/self_post_list\": \"发帖记录\",\n    \"main/drawer/history\": \"浏览历史\",\n    \"main/drawer/favorite\": \"我的收藏\",\n    \"main/drawer/about\": \"关于\",\n\n    \"posts/user_loading_failed\": \"用户信息加载失败: {message}\",\n    \"posts/illegal_user_id\": \"无效的 user id\",\n    \"posts/loading_failed\": \"页面加载失败：{message}\",\n    \"posts/jump_to\": \"转到\",\n\n    \"posts/apply_options\": \"确定\",\n    \"posts/cancel_options\": \"取消\",\n    \"posts/order_way\": \"排序方式\",\n    \"posts/order_by_reply\": \"最新回复\",\n    \"posts/order_by_post\": \"主贴编辑\",\n    \"posts/filter\": \"筛选用户发帖\",\n    \"posts/apply_filter\": \"确定\",\n\n    \"post/poster\": \"发帖人\",\n    \"post/create_time\": \"发帖时间\",\n    \"post/update_time\": \"最后编辑\",\n    \"post/edit\": \"编辑\",\n    \"post/reply\": \"回复\",\n    \"post/reply_to\": \"回复给: {nickname}\",\n    \"post/show_html\": \"显示HTML内容\",\n    \"post/hide_html\": \"隐藏HTML内容\",\n    \"post/jump_to_reply\": \"查看回复\",\n    \"post/fold_replies\": \"收起回复\",\n    \"post/more_replies\": \"更多回复\",\n\n    \"post/view_user_info\": \"个人资料\",\n    \"post/poster_only\": \"只看楼主\",\n    \"post/cancel_poster_only\": \"取消只看楼主\",\n\n    \"post/expand_image\": \"⬇点击展开图片\",\n    \"post/fold_image\": \"⬆点击折叠图片\",\n    \"post/expand_spoiler\": \"展开隐藏内容\",\n    \"post/fold_spoiler\": \"收起隐藏内容\",\n\n    \"post_create/create_post\": \"创建帖子\",\n    \"post_create/placeholder_title\": \"标题\",\n    \"post_create/placeholder_content\": \"正文内容\",\n    \"post_create/submit\": \"提交\",\n\n    \"reply_edit/title_prefix\": \"回复: {title}\",\n\n    \"user/create_time\": \"注册时间\",\n    \"user/show_user_post\": \"发帖记录\",\n    \"user/show_self_post\": \"发帖记录\",\n    \"user/show_history\": \"浏览历史\",\n    \"user/show_favorites\": \"我的收藏\",\n    \"user/username\": \"用户名\",\n    \"user/id\": \"ID\",\n    \"user/nickname\": \"昵称\",\n\n    \"history/title\": \"浏览历史 ({count})\",\n    \"history/clear_history\": \"清除所有记录\",\n\n    \"favorite/title\": \"我的收藏 ({count})\",\n    \"favorite/no_favorite\": \"暂时没有收藏\",\n\n    \"login/title\": \"清软论坛\",\n    \"login/login\": \"登录\",\n    \"login/username\": \"用户名\",\n    \"login/password\": \"密码\",\n    \"login/failed\": \"登录失败: {message}\",\n    \"login/logout\": \"登出\",\n};\n\nconst translations : {[message: string] : string} = {\n    \"user not found\": \"用户不存在\",\n}\n\nexport function translate(message: string): string {\n    return translations[message] || message;\n}\nexport function formatMessage(key: keyof typeof Strings, message: string) : string {\n    return Strings[key].replace(\"{message}\", message);\n}\n","export const Urls = {\n    \"hello\": \"/api/v1/hello\", // 测试 API. GET\n    \"hello-user\": \"/api/v1/hello-user\", // 测试 API. GET\n    \"login\": \"/api/v1/login\", // PATCH\n    \"logout\": \"/api/v1/logout\", // PATCH\n    \"user\": \"/api/v1/user\", // GET\n    \"other-user\": \"/api/v1/user/{userId}\", // GET\n    \"post\": \"/api/v1/post\", // GET, POST\n    \"edit-post\": \"/api/v1/post/{postId}\", // PUT\n    \"post-info\": \"/api/v1/post/{postId}\", // GET\n    \"reply\": \"/api/v1/post/{postId}/reply\", // POST\n    \"edit-reply\": \"/api/v1/post/{postId}/reply/{replyId}\", // POST\n}\n\nexport const LocalUrls = {\n\n    postList: function (userId?: number | string) {\n        return `/${userId !== undefined ? `?user_id=${userId}` : \"\"}`;\n    },\n\n    post: function (postId: number | string, posterOnly : boolean = false) {\n        return `/post/${postId}${posterOnly ? \"?posterOnly=1\" : \"\"}`;\n    },\n\n    replyToPost: function (postId: number | string) {\n        return `/reply/${postId}`;\n    },\n\n    replyToReply: function (postId: number | string, replyId: number | string) {\n        return `/reply/${postId}/${replyId}`\n    },\n\n    editPost: function (postId: number | string) {\n        return `/edit-post/${postId}`;\n    },\n\n    editReply: function (postId: number | string, replyId: number | string) {\n        return `/edit-reply/${postId}/${replyId}`\n    },\n\n    user: function (userId?: number | string) {\n        return userId === undefined ? \"/user\" : `/user/${userId}`;\n    },\n\n    login: function() {\n        return \"/login\";\n    },\n\n    createPost: function() {\n        return \"/submit-post\";\n    },\n\n    viewHistory: function() {\n        return \"/history\";\n    },\n\n    favorites: function() {\n        return \"/favorites\";\n    },\n\n    about: function() {\n        return \"/about\";\n    }\n}","import {configureStore, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\nimport {UserSelf} from \"./backend\";\n\nexport interface Store {\n    user: UserSelf | null,\n    token: string | null,\n}\n\nexport const userSlice = createSlice({\n    name: \"user\",\n    initialState: null as (UserSelf | null),\n    reducers: {\n        updateUserStatus(state, action: PayloadAction<UserSelf | null>) {\n            return action.payload;\n        },\n    }\n});\n\nexport const tokenSlice = createSlice({\n    name: \"token\",\n    initialState: localStorage.getItem(\"token\"),\n    reducers: {\n        setToken(state: string | null, action: PayloadAction<string | null>) {\n            if (action.payload != null) {\n                localStorage.setItem(\"token\", action.payload);\n            } else {\n                localStorage.removeItem(\"token\");\n            }\n            return action.payload;\n        }\n    }\n})\n\nexport const store = configureStore<Store>({\n    reducer: {\n        user: userSlice.reducer,\n        token: tokenSlice.reducer,\n    }\n})\n","import {Urls} from \"./urls\";\nimport {Strings, translate} from \"./strings\";\nimport {Dispatch} from \"react\";\nimport {tokenSlice, userSlice} from \"./store\";\n\nexport interface Floor {\n    \"id\": number,\n    \"userId\": number,\n    \"nickname\": string,\n    \"content\": string,\n    \"created\": string,\n    \"updated\": string\n}\n\nexport interface Post extends Floor {\n    \"id\": number,\n    \"userId\": number,\n    \"nickname\": string,\n    \"title\": string,\n    \"content\": string,\n    \"created\": string,\n    \"updated\": string\n    \"lastRepliedUserId\": string,\n    \"lastRepliedNickname\": string,\n    \"lastRepliedTime\": string\n}\n\nexport interface PostList {\n    'page': number,\n    'size': number,\n    'total': number,\n    'posts': Post[],\n}\n\nexport interface User {\n    \"id\": number,\n    \"nickname\": string,\n    \"created\": string\n}\n\nexport interface UserSelf extends User {\n    \"id\": number,\n    \"username\": string,\n    \"nickname\": string,\n    \"created\": string\n}\n\nexport interface Reply extends Floor {\n    \"id\": number,\n    \"userId\": number,\n    \"nickname\": string,\n    \"postId\": number,\n    \"replyId\": number,\n    \"content\": string,\n    \"created\": string,\n    \"updated\": string,\n}\n\nexport interface PostFull extends Floor {\n    \"id\": number,\n    \"userId\": number,\n    \"nickname\": string,\n    \"title\": string,\n    \"content\": string,\n    \"created\": string,\n    \"updated\": string\n    \"reply\": Reply[],// | null,\n    \"lastRepliedTime\": string,\n}\n\n/**\n * 登录.\n * @param username 用户名\n * @param password 密码\n */\nexport async function login(username: string, password: string)\n    : Promise<{ success: true, username: string, nickname: string, jwt: string } | { success: false, message: string }> {\n    let response = await fetch(Urls.login, {\n        \"method\": \"PATCH\",\n        \"mode\": \"cors\",\n        \"headers\": {\n            \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n            \"username\": username,\n            \"password\": password,\n        })\n    });\n    let json: { message?: string, username?: string, nickname?: string, jwt?: string };\n    try {\n        json = await response.json();\n    } catch (e) {\n        json = {\"message\": Strings[\"api/illegal_json\"]}\n    }\n    if (response.status !== 200 || (json.username == null || json.nickname == null || json.jwt == null)) {\n        return {\n            \"success\": false,\n            \"message\": translate(json.message || Strings[\"api/unknown_error\"]),\n        }\n    } else {\n        setToken(json.jwt);\n        return {\n            \"success\": true,\n            \"username\": json.username,\n            \"nickname\": json.nickname,\n            \"jwt\": json.jwt,\n        }\n    }\n}\n\n/**\n * 登出.\n * @param dispatch Redux useDispatch\n */\nexport async function logout(dispatch?: Dispatch<any>)\n    : Promise<{ success: true } | { success: false, message: string }> {\n    let response = await fetch(Urls.logout, {\n        \"method\": \"PATCH\",\n        \"mode\": \"cors\",\n        \"headers\": {\n            \"Authorization\": getToken() || \"\",\n        }\n    });\n    let json;\n    try {\n        json = await response.json();\n    } catch (e) {\n        json = {\"message\": Strings[\"api/illegal_json\"]}\n    }\n    if (dispatch) {\n        dispatch(userSlice.actions.updateUserStatus(null));\n        dispatch(tokenSlice.actions.setToken(null));\n    } else {\n        removeToken();\n    }\n    if (response.status !== 200) {\n        return {\n            \"success\": false,\n            \"message\": translate(json.message || Strings[\"api/unknown_error\"]),\n        }\n    } else {\n        return {\n            \"success\": true,\n        }\n    }\n}\n\n/**\n * 其他用户信息.\n * @param userId 用户 id\n */\nexport async function userOther(userId: number)\n    : Promise<({ success: true, user: User } | { success: false, authorized: boolean, message: string })> {\n    let response = await fetch(userId == null ? Urls.user\n        : Urls[\"other-user\"].replace(\"{userId}\", userId.toString()), {\n        \"method\": \"GET\",\n        \"mode\": \"cors\",\n        \"headers\": {\n            \"Authorization\": getToken() || \"\",\n        }\n    });\n    let json;\n    try {\n        json = await response.json();\n    } catch (e) {\n    }\n    if (response.status !== 200) {\n        return {\n            \"success\": false,\n            \"authorized\": (response.status !== 401),\n            \"message\": translate(json.message || Strings[\"api/unknown_error\"]),\n        }\n    } else {\n        return {\n            \"success\": true,\n            \"user\": json,\n        }\n    }\n\n}\n\n/**\n * 自己的用户信息.\n */\nexport async function user()\n    : Promise<({ success: true, user: UserSelf } | { success: false, authorized: boolean, message: string })> {\n    let response = await fetch( Urls.user, {\n        \"method\": \"GET\",\n        \"mode\": \"cors\",\n        \"headers\": {\n            \"Authorization\": getToken() || \"\",\n        }\n    });\n    let json;\n    try {\n        json = await response.json();\n    } catch (e) {\n    }\n    if (response.status !== 200) {\n        return {\n            \"success\": false,\n            \"authorized\": (response.status !== 401),\n            \"message\": translate(json.message || Strings[\"api/unknown_error\"]),\n        }\n    } else {\n        return {\n            \"success\": true,\n            \"user\": json,\n        }\n    }\n}\n\n/**\n * 帖子列表.\n * @param params.page (可选) 第几页\n * @param params.size (可选) 每页大小\n * @param params.userId (可选) 用户 ID (只显示某一用户)\n * @param params.orderByReply (可选) 是否按照回复时间序排序\n */\nexport async function posts(params: { page?: number, size?: number, userId?: number | string, orderByReply?: boolean })\n    : Promise<{ success: true, posts: PostList } | { success: false, authorized: boolean, message: string }> {\n    let response = await fetch(Urls.post + \"?\" + new URLSearchParams(Object.entries(params).reduce((prev: any, [k, v]) => {\n        if (v != null) {\n            prev[k] = v.toString();\n        }\n        return prev;\n    }, {})).toString(), {\n        \"method\": \"GET\",\n        \"mode\": \"cors\",\n        \"headers\": {\n            \"Authorization\": getToken() || \"\",\n        },\n    });\n    let json;\n    try {\n        json = await response.json();\n    } catch (e) {\n    }\n    if (response.status !== 200) {\n        return {\n            \"success\": false,\n            \"authorized\": (response.status !== 401),\n            \"message\": translate(json.message || Strings[\"api/unknown_error\"]),\n        }\n    } else {\n        return {\n            \"success\": true,\n            \"posts\": json,\n        }\n    }\n}\n\n/**\n * 帖子详情.\n * @param postId 帖子ID\n */\nexport async function post(postId: number)\n    : Promise<{ success: true, post: PostFull } | { success: false, authorized: boolean, message: string }> {\n    let response = await fetch(Urls[\"post-info\"].replace(\"{postId}\", postId.toString()), {\n        \"method\": \"GET\",\n        \"mode\": \"cors\",\n        \"headers\": {\n            \"Authorization\": getToken() || \"\",\n        },\n    });\n    let json;\n    try {\n        json = await response.json();\n    } catch (e) {\n    }\n    if (response.status !== 200) {\n        return {\n            \"success\": false,\n            \"authorized\": (response.status !== 401),\n            \"message\": translate(json.message || Strings[\"api/unknown_error\"]),\n        }\n    } else {\n        return {\n            \"success\": true,\n            \"post\": json,\n        }\n    }\n}\n\n/**\n * 发帖.\n * @param title 标题\n * @param content 内容\n */\nexport async function submitPost(title: string, content: string)\n    : Promise<{ success: true, postId: number } | { success: false, authorized: boolean, message: string }> {\n    let response = await fetch(Urls[\"post\"], {\n        \"method\": \"POST\",\n        \"mode\": \"cors\",\n        \"headers\": {\n            \"Authorization\": getToken() || \"\",\n            \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n            title: title,\n            content: content,\n        })\n    });\n    let json;\n    try {\n        json = await response.json();\n    } catch (e) {\n    }\n    if (response.status !== 200) {\n        return {\n            \"success\": false,\n            \"authorized\": (response.status !== 401),\n            \"message\": translate(json.message || Strings[\"api/unknown_error\"]),\n        }\n    } else {\n        return {\n            \"success\": true,\n            \"postId\": json.postId,\n        }\n    }\n}\n\n/**\n * 编辑帖子.\n * @param postId 帖子ID\n * @param title 新标题\n * @param content 新内容\n */\nexport async function editPost(postId: number, title: string, content: string)\n    : Promise<{ success: true, post: PostFull } | { success: false, authorized: boolean, message: string }> {\n    let response = await fetch(Urls[\"edit-post\"].replace(\"{postId}\", postId.toString()), {\n        \"method\": \"PUT\",\n        \"mode\": \"cors\",\n        \"headers\": {\n            \"Authorization\": getToken() || \"\",\n            \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n            title: title,\n            content: content,\n        })\n    });\n    let json;\n    try {\n        json = await response.json();\n    } catch (e) {\n    }\n    if (response.status !== 200) {\n        return {\n            \"success\": false,\n            \"authorized\": (response.status !== 401),\n            \"message\": translate(json.message || Strings[\"api/unknown_error\"]),\n        }\n    } else {\n        return {\n            \"success\": true,\n            \"post\": json,\n        }\n    }\n}\n\n/**\n * 编辑回复.\n * @param postId 帖子ID\n * @param replyId 回复ID\n * @param content 新内容\n */\nexport async function editReply(postId: number, replyId: number, content: string)\n    : Promise<{ success: true, post: PostFull } | { success: false, authorized: boolean, message: string }> {\n    let response = await fetch(Urls[\"edit-reply\"].replace(\"{postId}\", postId.toString())\n        .replace(\"{replyId}\", replyId.toString()), {\n        \"method\": \"PUT\",\n        \"mode\": \"cors\",\n        \"headers\": {\n            \"Authorization\": getToken() || \"\",\n            \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n            content: content,\n        })\n    });\n    let json;\n    try {\n        json = await response.json();\n    } catch (e) {\n    }\n    if (response.status !== 200) {\n        return {\n            \"success\": false,\n            \"authorized\": (response.status !== 401),\n            \"message\": translate(json.message || Strings[\"api/unknown_error\"]),\n        }\n    } else {\n        return {\n            \"success\": true,\n            \"post\": json,\n        }\n    }\n}\n\n/**\n * 回复回复.\n * @param postId 帖子ID\n * @param replyId 回复ID\n * @param content 内容\n */\nexport async function replyPost(postId: number, replyId: number, content: string)\n    : Promise<{ success: true, post: PostFull } | { success: false, authorized: boolean, message: string }> {\n    let response = await fetch(Urls[\"reply\"].replace(\"{postId}\", postId.toString()), {\n        \"method\": \"POST\",\n        \"mode\": \"cors\",\n        \"headers\": {\n            \"Authorization\": getToken() || \"\",\n            \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(replyId === 0 ? {\n            content: content,\n        } : {\n            content: content,\n            replyId: replyId,\n        })\n    });\n    let json;\n    try {\n        json = await response.json();\n    } catch (e) {\n    }\n    if (response.status !== 200) {\n        return {\n            \"success\": false,\n            \"authorized\": (response.status !== 401),\n            \"message\": translate(json.message || Strings[\"api/unknown_error\"]),\n        }\n    } else {\n        return {\n            \"success\": true,\n            \"post\": json,\n        }\n    }\n}\n\n/**\n * 是否已登录.\n */\nfunction isAuthenticated(): boolean {\n    return !!localStorage.getItem(\"token\");\n}\n\n/**\n * 当前的 token.\n */\nfunction getToken(): string | null {\n    return localStorage.getItem(\"token\");\n}\n\n/**\n * 设置 token.\n * @param token token\n */\nfunction setToken(token: string) {\n    localStorage.setItem(\"token\", token);\n}\n\n/**\n * 清除 token.\n */\nfunction removeToken() {\n    localStorage.removeItem(\"token\");\n}\n","import React from \"react\";\nimport {Button, CircularProgress, createStyles, TextField, Typography, useTheme} from \"@material-ui/core\";\nimport {formatMessage, Strings} from \"../strings\";\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport {login} from \"../backend\";\nimport {Store, tokenSlice, userSlice} from \"../store\";\nimport {Alert} from \"@material-ui/lab\";\nimport {Link, Redirect} from \"react-router-dom\";\nimport {useDispatch, useSelector} from \"react-redux\";\n\nconst useStyles = makeStyles((theme) => createStyles({\n    list: {\n        padding: \"20px\",\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: \"center\",\n        \"& .MuiTextField-root, .MuiButton-root\": {\n            margin: theme.spacing(1),\n            width: \"30ch\",\n        },\n    },\n    alert: {\n        justifySelf: \"flex-end\",\n    }\n}))\n\nexport function LoginPage(props: any) {\n    const classes = useStyles(useTheme());\n    const token = useSelector((store: Store) => store.token);\n    const dispatch = useDispatch();\n    const [username, setUsername] = React.useState(\"\");\n    const [password, setPassword] = React.useState(\"\");\n    const [loggingIn, setLoggingIn] = React.useState(false);\n    const [loggedIn, setLoggedIn] = React.useState(token != null);\n    const [errorMessage, setErrorMessage] = React.useState(null as (string | null));\n\n    const handleClick = () => {\n        if ((username !== \"\" && password !== \"\") && !loggingIn && !loggedIn) {\n            setLoggingIn(true);\n            setErrorMessage(null);\n            login(username, password).then((result) => {\n                setLoggingIn(false);\n                if (result.success) {\n                    dispatch(tokenSlice.actions.setToken(result.jwt));\n                    setLoggedIn(true);\n                } else {\n                    setErrorMessage(result.message);\n                }\n            }, (reason) => {\n                setLoggingIn(false);\n                setErrorMessage(reason);\n            });\n        }\n    }\n\n    return <div className={classes.list}>\n        {loggedIn ? <Redirect to=\"/\"/> : undefined}\n        <Typography variant=\"h4\">{Strings[\"login/title\"]}</Typography>\n        <TextField\n            required\n            id=\"username\"\n            label={Strings[\"login/username\"]}\n            onChange={(evt) => {\n                setUsername(evt.target.value);\n            }}\n        />\n        <TextField\n            required\n            id=\"password\"\n            label={Strings[\"login/password\"]}\n            type=\"password\"\n            onSubmit={() => handleClick()}\n            onChange={(evt) => {\n                setPassword(evt.target.value);\n            }}\n        />\n        <Button onClick={() => handleClick()}\n                variant=\"contained\"\n                color={(username !== \"\" && password !== \"\" && !loggingIn) ? \"primary\" : \"default\"}>\n            {loggingIn ? <CircularProgress size=\"1em\" color=\"primary\"/> : undefined}\n            {Strings[\"login/login\"]}\n            {loggingIn ? <span style={{\"width\": \"1em\"}}/> : undefined}\n        </Button>\n        {errorMessage ? <Alert severity=\"error\">{formatMessage(\"login/failed\", errorMessage)}</Alert> : undefined}\n    </div>\n}","\nexport const Constants = {\n    \"post-per-page\": 10,\n    \"preview-content-length\": 100,\n}","import React from \"react\";\nimport moment from \"moment\";\n\nexport function toShortTimeString(time: string) {\n    const t = moment(time);\n    const today = moment();\n    return t.format((t.date() === today.date() && t.month() === today.month() && t.year() === today.year())\n        ? \"HH:mm:ss\" : \"YYYY-MM-DD\");\n}\n\nexport function toTimeString(time: string) {\n    return moment(time).format(\"YYYY-MM-DD HH:mm:ss\");\n}\n\nexport function TimeView(props: {\n    time: string,\n    short?: boolean,\n}) {\n    let str;\n    if (props.short) {\n        str = moment(props.time).format(\"YYYY-MM-DD\");\n    } else {\n        str = moment(props.time).format(\"YYYY-MM-DD HH:mm:ss\");\n    }\n    return <span className=\"TimeView-text\">{str}</span>;\n}","import {Constants} from \"../constants\";\nimport {Post, PostFull} from \"../backend\";\nimport moment from \"moment\";\n\n/**\n * 将 HTML 字符串展平并裁剪，用于帖子预览.\n * @param htmlString\n */\nexport function flatten(htmlString: string): string {\n    let str = htmlString.replace(/<\\/?\\w+.*?>/g, \"\");\n    if (str.length > Constants[\"preview-content-length\"]) {\n        str = str.substring(0, Constants[\"preview-content-length\"]) + \"...\";\n    }\n    return str;\n}\n\nexport type HistoryEntry = { postId: number, title: string, content: string, replyTime: string, replyNickname: string, userNickname: string };\n\n/**\n * 将 post 转换为历史记录条目，删除不必要的信息.\n * @param post 帖子完整内容\n */\nexport function createHistoryEntryFromPostFull(post: PostFull): HistoryEntry {\n    let lastRepliedNickname = post.nickname;\n    let lastReplyTime = moment(post.updated).unix();\n    for (let reply of post.reply) {\n        let t = moment(reply.updated).unix();\n        if (t > lastReplyTime) {\n            lastReplyTime = t;\n            lastRepliedNickname = reply.nickname;\n        }\n    }\n    return {\n        postId: post.id,\n        title: post.title,\n        content: flatten(post.content),\n        replyTime: post.lastRepliedTime,\n        replyNickname: lastRepliedNickname,\n        userNickname: post.nickname,\n    }\n}\n\n/**\n * 将历史条目转换为帖子内容. 仅有预览需要的信息.\n * @param entry 历史记录条目\n */\nexport function createPostDigestFromHistoryEntry(entry: HistoryEntry): Post {\n    return {\n        \"id\": entry.postId,\n        \"userId\": 0,\n        \"nickname\": entry.userNickname,\n        \"title\": entry.title,\n        \"content\": entry.content,\n        \"created\": \"\",\n        \"updated\": \"\",\n        \"lastRepliedUserId\": \"\",\n        \"lastRepliedNickname\": entry.replyNickname,\n        \"lastRepliedTime\": entry.replyTime\n    }\n}\n\n/**\n * 添加一个历史记录.\n * @param historyEntry 历史记录条目\n */\nexport function pushViewHistory(historyEntry: HistoryEntry) {\n    const hist = localStorage.getItem(\"viewHistory\") || \"[]\";\n    const obj = JSON.parse(hist) || [];\n    if (obj.length > 0 && obj[0].postId === historyEntry.postId) {\n        obj.shift();\n    }\n    obj.unshift(historyEntry);\n    localStorage.setItem(\"viewHistory\", JSON.stringify(obj));\n}\n\n/**\n * 获取历史记录列表.\n */\nexport function getViewHistory(): HistoryEntry[] {\n    const hist = localStorage.getItem(\"viewHistory\") || \"[]\";\n    return JSON.parse(hist) || [];\n}\n\n/**\n * 清空历史记录.\n */\nexport function clearHistory() {\n    localStorage.setItem(\"viewHistory\", \"[]\");\n}\n\n/**\n * 加入收藏.\n * @param historyEntry 历史记录条目\n */\nexport function pushFavorites(historyEntry: HistoryEntry) {\n    const fav = localStorage.getItem(\"favorites\") || \"{}\";\n    const obj = JSON.parse(fav) || {};\n    obj[historyEntry.postId] = historyEntry;\n    localStorage.setItem(\"favorites\", JSON.stringify(obj));\n}\n\n/**\n * 获取收藏列表.\n */\nexport function getFavoritesList(): HistoryEntry[] {\n    const fav = localStorage.getItem(\"favorites\") || \"{}\";\n    const obj = JSON.parse(fav) || {};\n    return Object.entries(obj).map(([key, value]) => value as HistoryEntry);\n}\n\n/**\n * 删除收藏.\n * @param postId 帖子 ID\n */\nexport function removeFavorites(postId: number) {\n    const fav = localStorage.getItem(\"favorites\") || \"{}\";\n    const obj = JSON.parse(fav) || {};\n    if (obj[postId]) {\n        delete obj[postId];\n    }\n    localStorage.setItem(\"favorites\", JSON.stringify(obj));\n}\n\n/**\n * 是否收藏.\n * @param postId 帖子 ID\n */\nexport function hasFavorites(postId: number): boolean {\n    const fav = localStorage.getItem(\"favorites\") || \"{}\";\n    const obj = JSON.parse(fav) || {};\n    return !!(obj[postId]);\n}\n\nexport interface PostListSettings {\n    orderByReplyTime: boolean,\n}\n\nconst defaultSettings : PostListSettings = {\n    orderByReplyTime: true,\n}\n\nexport function getPostListSettings() : PostListSettings {\n    const st = localStorage.getItem(\"post-list-settings\");\n    return {...defaultSettings, ...(st ? (JSON.parse(st) || {}) : {})};\n}\n\nexport function setPostListSettings(settings: PostListSettings) {\n    localStorage.setItem(\"post-list-settings\", JSON.stringify(settings));\n}\n","import React from 'react';\nimport {createStyles, Divider, List, ListItem, ListItemText, useTheme} from \"@material-ui/core\";\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport {Post} from \"../backend\";\nimport {Link} from \"react-router-dom\";\nimport {toShortTimeString} from \"../utils/time_view\";\nimport {LocalUrls} from \"../urls\";\nimport MessageIcon from '@material-ui/icons/Message';\nimport ReplyIcon from '@material-ui/icons/Reply';\nimport {Constants} from \"../constants\";\nimport {Pagination} from \"@material-ui/lab\";\nimport {flatten} from \"../utils/utils\";\n\nconst useStyles = makeStyles((theme) => createStyles({\n    \"postCard\": {\n        backgroundColor: theme.palette.background.paper,\n    },\n    \"list\": {\n        marginTop: theme.spacing(1),\n    },\n    \"postPreview\": {\n        \"& .MuiListItemText-secondary\": {\n            display: \"-webkit-box\",\n            \"-webkit-line-clamp\": 2,\n            \"-webkit-box-orient\": \"vertical\",\n            overflow: \"hidden\",\n            textOverflow: \"ellipse\",\n            lineBreak: \"anywhere\",\n        },\n        \"& .MuiListItem-root\": {\n            alignItems: \"flex-start\",\n        }\n    },\n    \"right\": {\n        marginLeft: \"auto\",\n        marginRight: \"0\",\n        flex: \"0 0 5em\",\n    },\n    \"verticalCentralize\": {\n        display: \"flex\",\n        alignItems: \"center\",\n        fontSize: \"0.9em\",\n    }\n}));\n\n/**\n * 简短的帖子预览.\n * @param props 帖子\n */\nfunction PostPreview(props: Post) {\n    const classes = useStyles(useTheme());\n    return <ListItem className={classes.postPreview}\n                     button\n                     component={Link}\n                     to={LocalUrls.post(props.id)}\n    >\n        <ListItemText\n            primary={props.title}\n            secondary={flatten(props.content)}\n        />\n        <ListItemText\n            className={classes.right}\n            primary={<React.Fragment>\n                <div className={classes.verticalCentralize}><MessageIcon fontSize=\"inherit\"/>{props.nickname}</div>\n                <div className={classes.verticalCentralize}><ReplyIcon fontSize=\"inherit\"/>{props.lastRepliedNickname}\n                </div>\n            </React.Fragment>}\n            secondary={toShortTimeString(props.lastRepliedTime)}\n        />\n    </ListItem>;\n}\n\n/**\n * 帖子预览列表.\n * @param props.posts 帖子列表\n */\nexport function PostListView(props: {\n    posts: Post[],\n}) {\n    const classes = useStyles(useTheme());\n    const postPreviewList = [];\n    let first = true;\n    let i = 0;\n    for (let post of props.posts) {\n        if (first) {\n            first = false;\n            postPreviewList.push(<Divider variant=\"fullWidth\" component=\"li\" key={i}/>);\n            ++i;\n        }\n        postPreviewList.push(<PostPreview {...post} key={i}/>);\n        ++i;\n        postPreviewList.push(<Divider variant=\"fullWidth\" component=\"li\" key={i}/>);\n        ++i;\n    }\n    return <List className={classes.list}>\n        {postPreviewList}\n    </List>;\n}\n\n/**\n * 分页的帖子预览列表.\n * @param props.posts 帖子列表\n */\nexport function PagedPostsView(props: {\n    posts: Post[],\n}) {\n    const [currentPage, setCurrentPage] = React.useState(1);\n    const maxPages = Math.max(1, Math.ceil(props.posts.length / Constants[\"post-per-page\"]));\n    const pageStart = (currentPage - 1) * Constants[\"post-per-page\"];\n    const pageEnd = pageStart + Constants[\"post-per-page\"];\n    return <React.Fragment>\n        <PostListView posts={props.posts.slice(pageStart, pageEnd)}/>\n        <div style={{display: \"flex\", justifyContent: \"center\"}}>\n            <Pagination page={currentPage} count={maxPages}\n                        onChange={(evt, value) => setCurrentPage(value)}/>\n        </div>\n    </React.Fragment>\n}","import React from \"react\";\nimport {Button, createStyles, useTheme, ButtonGroup} from \"@material-ui/core\";\nimport {Strings} from \"../strings\";\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport {Link} from \"react-router-dom\";\nimport HomeIcon from '@material-ui/icons/Home';\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\nimport clsx from \"clsx\";\n\nconst useStyles = makeStyles(theme => createStyles({\n    \"marginBottom\": {\n        marginBottom: theme.spacing(1),\n    }\n}));\n\n/**\n * 返回主页.\n */\nexport function GoHome(props: any) {\n    return <Button variant=\"outlined\" component={Link} to=\"/\">\n        <HomeIcon/><span>{Strings[\"main/go_homepage\"]}</span></Button>;\n}\n\n/**\n * 返回上一页.\n * @param props.history History 对象\n */\nexport function GoBack(props: {\n    history: any,\n}) {\n    return <Button variant=\"outlined\" component=\"span\"\n                   onClick={() => props.history.goBack()}>\n        <ArrowBackIcon/><span>{Strings[\"main/go_back\"]}</span>\n    </Button>\n}\n\n/**\n * 返回主页和返回上一页按钮合并的 ButtonGroup.\n * @param props.history History 对象\n * @param props.marginBottom 是否添加一个 8px 的外边距\n */\nexport function ToolbarButtonGroup(props: {\n    history: any,\n    marginBottom?: boolean\n}) {\n    const classes = useStyles(useTheme());\n    return <ButtonGroup className={clsx(props.marginBottom && classes.marginBottom)}>\n        <Button variant=\"outlined\" component={Link} to=\"/\">\n            <HomeIcon/><span>{Strings[\"main/go_homepage\"]}</span></Button>\n        <Button variant=\"outlined\"  component=\"span\"\n                onClick={() => props.history.goBack()}>\n            <ArrowBackIcon/><span>{Strings[\"main/go_back\"]}</span>\n        </Button>\n    </ButtonGroup>\n}","import React from \"react\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {Store, tokenSlice, userSlice} from \"../store\";\nimport {Button, ButtonGroup, Container, createStyles, Typography, useTheme} from \"@material-ui/core\";\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport {Redirect} from \"react-router\";\nimport {Alert, Skeleton} from \"@material-ui/lab\";\nimport {toTimeString} from \"../utils/time_view\";\nimport {Strings} from \"../strings\";\nimport {logout, User, userOther, UserSelf} from \"../backend\";\nimport {ToolbarButtonGroup} from \"../utils/shared_components\";\nimport {Link} from \"react-router-dom\";\nimport {LocalUrls} from \"../urls\";\n\nconst useStyles = makeStyles(theme => createStyles({\n    list: {\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: \"flex-start\",\n        boxSizing: \"border-box\",\n        lineHeight: \"1.7em\",\n        \"& .MuiSkeleton-root\": {\n            width: \"100%\",\n        },\n        //maxWidth: \"max-content\",\n    },\n    buttonBar: {\n        marginTop: theme.spacing(2),\n        marginBottom: theme.spacing(2),\n        \"& .MuiButton-root\": {\n            marginBottom: theme.spacing(1),\n        },\n        \"& .logout-button\": {\n            marginLeft: theme.spacing(1),\n        },\n        justifyContent: \"center\",\n        display: \"flex\",\n        alignSelf: \"center\",\n        flexWrap: \"wrap\",\n    }\n}))\n\nexport function KeyValueView(props: {\n    keyString: string,\n    value: string,\n}) {\n    return <div>\n        <Typography component=\"span\" variant=\"body2\"\n                    style={{display: \"inline-block\", width: \"6em\"}}>{props.keyString}</Typography>\n        <Typography component=\"span\" variant=\"body1\">{props.value}</Typography>\n    </div>;\n}\n\nexport function UserInfoPage(props: {\n    match: {\n        params: {\n            userId?: string,\n        }\n    },\n    history: any,\n}) {\n    const classes = useStyles(useTheme());\n    const token = useSelector((state: Store) => state.token);\n    const userInfo = useSelector((state: Store) => state.user);\n    const dispatch = useDispatch();\n    const handleClick = () => {\n        if (userInfo) {\n            logout(dispatch);\n        }\n    };\n    let [userInfoOthers, setUserInfoOthers] = React.useState(null as (User | null));\n    let [errorMessage, setErrorMessage] = React.useState(null as (string | null));\n    const isOther = props?.match?.params?.userId;\n    React.useEffect(() => {\n        if (props?.match?.params?.userId) {\n            userOther(parseInt(props.match.params.userId)).then((result) => {\n                if (result.success) {\n                    setUserInfoOthers(result.user);\n                    setErrorMessage(null);\n                } else {\n                    if (!result.authorized) {\n                        logout(dispatch);\n                    }\n                    setErrorMessage(result.message);\n                }\n            }, (reason) => {\n                setErrorMessage(reason.toString());\n            });\n        }\n    }, [props?.match?.params?.userId]);\n\n    const userInfoToRender = isOther ? userInfoOthers : userInfo;\n\n    return <React.Fragment>\n        <Container maxWidth=\"sm\" className={classes.list}>\n            <ToolbarButtonGroup history={props.history} marginBottom={true}/>\n            {token == null ? <Redirect to=\"/\"/>\n                : (userInfoToRender == null ?\n                    (errorMessage == null ? <React.Fragment>\n                            <Skeleton animation=\"wave\" height=\"20px\"/>\n                            <Skeleton animation=\"wave\"/>\n                            <Skeleton animation=\"wave\"/>\n                            <Skeleton animation=\"wave\"/>\n                        </React.Fragment>\n                        : <Alert style={{alignSelf: \"stretch\"}} severity=\"error\">{errorMessage}</Alert>) :\n                    <React.Fragment>\n                        <Typography variant=\"h6\" color=\"primary\" component=\"div\">\n                            {userInfoToRender.nickname}\n                        </Typography>\n                        <KeyValueView keyString={Strings[\"user/id\"]}\n                                      value={userInfoToRender.id.toString()}/>\n                        {isOther ? undefined : <KeyValueView keyString={Strings[\"user/username\"]}\n                                                             value={(userInfoToRender as UserSelf).username}/>}\n                        <KeyValueView keyString={Strings[\"user/create_time\"]}\n                                      value={toTimeString(userInfoToRender.created)}/>\n                        <div className={classes.buttonBar}>\n                            {!isOther ?\n                                <React.Fragment>\n                                    <ButtonGroup>\n                                        <Button variant=\"outlined\" color=\"primary\" component={Link}\n                                                to={LocalUrls.postList(userInfoToRender.id)}>\n                                            {Strings[\"user/show_self_post\"]}\n                                        </Button>\n                                        <Button variant=\"outlined\" color=\"primary\" component={Link}\n                                                to={LocalUrls.viewHistory()}>\n                                            {Strings[\"user/show_history\"]}\n                                        </Button>\n                                        <Button variant=\"outlined\" color=\"primary\" component={Link}\n                                                to={LocalUrls.favorites()}>\n                                            {Strings[\"user/show_favorites\"]}\n                                        </Button>\n                                    </ButtonGroup>\n                                    <Button variant=\"outlined\" color=\"secondary\" className=\"logout-button\"\n                                            onClick={handleClick}>{Strings[\"login/logout\"]}</Button>\n                                </React.Fragment>\n                                : <Button variant=\"outlined\" color=\"primary\" component={Link}\n                                          to={LocalUrls.postList(userInfoToRender.id)}>\n                                    {Strings[\"user/show_user_post\"]}\n                                </Button>}\n                        </div>\n                    </React.Fragment>)}\n        </Container>\n    </React.Fragment>\n\n}","import React from \"react\";\nimport {makeStyles, Theme, withStyles} from \"@material-ui/core/styles\";\nimport {\n    Button,\n    ButtonGroup, Card, CardActions, CardContent,\n    Collapse,\n    Container,\n    createStyles, Divider, Grid,\n    Hidden, Switch,\n    TextField,\n    Typography,\n    useTheme\n} from \"@material-ui/core\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {Store, tokenSlice} from \"../store\";\nimport {logout, PostList, posts, User, userOther, UserSelf} from \"../backend\";\nimport {Constants} from \"../constants\";\nimport {formatMessage, Strings} from \"../strings\";\nimport {PostListView} from \"../post/post_list_view\";\nimport {Alert, Pagination, Skeleton} from \"@material-ui/lab\";\nimport {current} from \"@reduxjs/toolkit\";\nimport {toTimeString} from \"../utils/time_view\";\nimport {Link} from \"react-router-dom\";\nimport {LocalUrls} from \"../urls\";\nimport {KeyValueView} from \"../user/user_page\";\nimport {GoBack, GoHome, ToolbarButtonGroup} from \"../utils/shared_components\";\nimport EditIcon from \"@material-ui/icons/Edit\";\nimport RefreshIcon from \"@material-ui/icons/Refresh\";\nimport MoreHorizIcon from '@material-ui/icons/MoreHoriz';\nimport {getPostListSettings, setPostListSettings} from \"../utils/utils\";\n\nconst useStyles = makeStyles((theme) => createStyles({\n    \"main\": {\n        display: \"flex\",\n        flexDirection: \"column\",\n        minHeight: \"auto\",\n    },\n    \"pageChange\": {\n        alignSelf: \"center\",\n        display: \"flex\",\n        alignItems: \"center\",\n        \"& .pageNumberButton\": {\n            marginLeft: theme.spacing(1),\n            cursor: \"pointer\"\n        },\n        \"& .pageNumberButton:hover\": {\n            textDecoration: \"underline\",\n            //cursor: \"pointer\",\n        },\n        \"& .MuiTextField-root\": {\n            width: \"5ch\",\n            marginLeft: theme.spacing(1),\n        },\n        \"& .MuiInputBase-input\": {\n            padding: \"5px 5px\",\n        },\n        \"& .MuiButtonBase-root\": {\n            minWidth: \"0\",\n        },\n        \"& .selectedPage\": {\n            color: theme.palette.text.secondary,\n            textDecoration: \"underline\",\n        }\n    },\n    \"buttonBar\": {\n        display: \"flex\",\n        // justifyContent: \"flex-end\",\n        \"& .MuiButtonGroup-root\": {\n            marginLeft: \"auto\",\n            marginRight: \"0\",\n        },\n        alignItems: \"center\",\n        paddingLeft: theme.spacing(2),\n    },\n    \"userInfo\": {\n        paddingLeft: theme.spacing(2),\n    },\n    \"middle\": {\n        display: \"flex\",\n        justifyContent: \"center\",\n    },\n    \"settingsPanel\": {\n        marginTop: theme.spacing(1),\n        \"& .inline\": {\n            display: \"flex\",\n            flexWrap: \"wrap\",\n            alignItems: \"center\",\n        },\n        \"& .inline .uid\": {\n            width: \"5em\",\n        },\n        \"& .inline .label\": {\n            marginRight: theme.spacing(1),\n        },\n        \"& .inline .MuiButtonGroup-root\": {\n            marginLeft: \"auto\",\n        },\n    },\n}));\n\n\nfunction PageChangeControl(props: {\n    current: number,\n    max: number,\n    onClick?: (newPage: number) => any,\n    large: boolean,\n}) {\n    const classes = useStyles(useTheme());\n    let buttonList = [];\n    let [textValue, setTextValue] = React.useState(current.toString());\n    const handleClick = (page: number) => {\n        if (isFinite(page) && !isNaN(page)) {\n            page = Math.max(Math.min(page, props.max), 1);\n            if (page !== props.current && props.onClick) {\n                props.onClick(page);\n            }\n        }\n    }\n    let left = Math.max(1, props.current - (props.large ? 5 : 2));\n    let right = Math.min(props.current + (props.large ? 5 : 3), props.max);\n    if (left > 1 && props.large) {\n        buttonList.push(<span key={\"left\"}>...</span>)\n    }\n    for (let i = left; i <= right; ++i) {\n        buttonList.push(<span key={i}\n                              className={i === props.current ? \"pageNumberButton selectedPage\" : \"pageNumberButton\"}\n                              onClick={() => handleClick(i)}>{i.toString()}\n        </span>);\n    }\n    if (right < props.max && props.large) {\n        buttonList.push(<span key={\"right\"}>...</span>)\n    }\n    return <span className={classes.pageChange}>\n        <span className=\"pageNumberButton\" onClick={() => handleClick(1)}>{\"<<\"}</span>\n        <span className=\"pageNumberButton\" onClick={() => handleClick(props.current - 1)}>{\"<\"}</span>\n        {buttonList}\n        <span className=\"pageNumberButton\" onClick={() => handleClick(props.current + 1)}>{\">\"}</span>\n        <span className=\"pageNumberButton\" onClick={() => handleClick(props.max)}>{\">>\"}</span>\n        <TextField variant=\"outlined\" placeholder={`  /${props.max}`} inputMode=\"numeric\"\n                   onChange={(evt) => setTextValue(evt.target.value)}/>\n        <Button onClick={() => handleClick(parseInt(textValue))}>{Strings[\"posts/jump_to\"]}</Button>\n    </span>\n}\n\n\nexport function PostListViewPage(props: {\n    userId: string | null,\n    history: any,\n}) {\n    const userInfo = useSelector((store: Store) => store.user);\n    const classes = useStyles(useTheme());\n    const dispatch = useDispatch();\n    const [currentPosts, setPosts] = React.useState(null as (PostList | null));\n    const [postLoadingFailed, setPostLoadingFailed] = React.useState(false);\n    const [postFailMessage, setPostFailMessage] = React.useState(null as (string | null));\n    const [userInfoOthers, setUserInfoOthers] = React.useState(null as (User | null));\n    const [userErrorMessage, setUserErrorMessage] = React.useState(null as (string | null));\n    const [open, setOpen] = React.useState(false);\n    const [settings, setSettings] = React.useState(getPostListSettings());\n    const [tempUserId, setTempUserId] = React.useState(0);\n\n    const [currentPage, setPage] = React.useState(1);\n    const resetStates = () => {\n        setPosts(null);\n        setPostLoadingFailed(false);\n        setPostFailMessage(null);\n        setUserInfoOthers(null);\n        setUserErrorMessage(null);\n        setOpen(false);\n    }\n\n    const reloadPosts = () => {\n        if (userInfo != null) {\n            setPosts(null);\n            posts({\n                page: currentPage,\n                size: Constants[\"post-per-page\"],\n                userId: props.userId == null ? undefined : props.userId,\n                orderByReply: getPostListSettings().orderByReplyTime,\n            }).then((result) => {\n                if (result.success) {\n                    setPostLoadingFailed(false);\n                    setPosts(result.posts);\n                    setPostLoadingFailed(false);\n                    setPostFailMessage(null);\n                } else {\n                    if (result.authorized) {\n                        setPostLoadingFailed(true);\n                        setPostFailMessage(result.message);\n                    } else {\n                        dispatch(tokenSlice.actions.setToken(null));\n                        props.history.push(\"/\");\n                    }\n                }\n            }, (reason) => {\n                setPostLoadingFailed(true);\n                setPostFailMessage(reason.toString());\n            });\n        }\n    }\n    React.useEffect(() => {\n        resetStates();\n        reloadPosts();\n    }, [props.userId, userInfo, currentPage, getPostListSettings().orderByReplyTime]);\n\n    React.useEffect(() => {\n        if (props.userId) {\n            userOther(parseInt(props.userId)).then((result) => {\n                if (result.success) {\n                    setUserInfoOthers(result.user);\n                } else {\n                    if (!result.authorized) {\n                        logout(dispatch);\n                    }\n                    setUserErrorMessage(result.message);\n                }\n            }, (reason) => {\n                setUserErrorMessage(reason.toString());\n            });\n        }\n    }, [props.userId]);\n\n    const openSettings = () => {\n        setSettings(getPostListSettings());\n        setOpen(true);\n    }\n\n    const closeSettings = () => {\n        setOpen(false);\n    }\n\n    const saveSettings = () => {\n        setPostListSettings(settings);\n        setOpen(false);\n    }\n\n    return <React.Fragment>\n        <Container className={classes.main} maxWidth=\"lg\">\n            {props.userId ?\n                <React.Fragment>\n                    <ToolbarButtonGroup history={props.history}/>\n                    {userInfoOthers ?\n                        <div className={classes.userInfo}>\n                            <Typography variant=\"h6\" color=\"primary\" component=\"div\">\n                                {Strings[\"main/user_post_list\"].replace(\"{nickname}\", userInfoOthers.nickname)}\n                            </Typography>\n                            <KeyValueView keyString={Strings[\"user/id\"]}\n                                          value={userInfoOthers.id.toString()}/>\n                            <KeyValueView keyString={Strings[\"user/create_time\"]}\n                                          value={toTimeString(userInfoOthers.created)}/>\n                        </div>\n                        : (userErrorMessage == null ? <React.Fragment>\n                                <Skeleton animation=\"wave\" height=\"30px\"/>\n                                <Skeleton animation=\"wave\"/>\n                                <Skeleton animation=\"wave\"/>\n                                <Skeleton animation=\"wave\"/>\n                            </React.Fragment>\n                            :\n                            <Alert\n                                severity=\"error\">{formatMessage(\"posts/user_loading_failed\", userErrorMessage)}</Alert>)}\n                </React.Fragment> : <div className={classes.buttonBar}>\n                    <Typography variant=\"h6\" component=\"span\">{Strings[\"main/post_list\"]}</Typography>\n                    <ButtonGroup>\n                        <Button variant=\"outlined\" onClick={reloadPosts}><RefreshIcon/>{Strings[\"main/refresh\"]}\n                        </Button>\n                        <Button variant=\"outlined\" component={Link}\n                                to={LocalUrls.createPost()}><EditIcon/>{Strings[\"main/drawer/submit_post\"]}</Button>\n                        <Button variant=\"outlined\" color={open ? \"primary\" : \"default\"} onClick={open ? closeSettings : openSettings}>\n                            <MoreHorizIcon/>\n                        </Button>\n                    </ButtonGroup>\n                </div>\n            }\n            {!props.userId ? <Collapse in={open}>\n                <div className={classes.settingsPanel}>\n                    <Card className={classes.settingsPanel} variant=\"outlined\">\n                        <CardContent>\n                            <Typography component=\"div\" className=\"inline\">\n                                <span className=\"label\">{Strings[\"posts/order_way\"]}</span>\n                                <label>\n                                    {Strings[\"posts/order_by_post\"]}\n                                    <Switch checked={settings.orderByReplyTime} onChange={(evt: any) => {\n                                        setSettings({...settings, orderByReplyTime: evt.target.checked});\n                                    }}/>\n                                    {Strings[\"posts/order_by_reply\"]}\n                                </label>\n                                <ButtonGroup>\n                                    <Button onClick={saveSettings}>{Strings[\"posts/apply_options\"]}</Button>\n                                    <Button onClick={closeSettings}>{Strings[\"posts/cancel_options\"]}</Button>\n                                </ButtonGroup>\n                            </Typography>\n                        </CardContent>\n                        <Divider/>\n                        <CardContent>\n                            <Typography component=\"div\" className=\"inline\">\n                                <span className=\"label\">{Strings[\"posts/filter\"]}</span>\n                                <TextField className=\"uid\" placeholder={\"ID\"} defaultValue={\"\"} onChange={\n                                    (evt) => setTempUserId(parseInt(evt.target.value))}/>\n                                <ButtonGroup>\n                                    <Button variant=\"outlined\"\n                                            component={Link} to={(tempUserId && !isNaN(tempUserId)) ?\n                                        LocalUrls.postList(tempUserId) : \"\"}>{Strings[\"posts/apply_filter\"]}</Button>\n                                </ButtonGroup>\n                            </Typography>\n                        </CardContent>\n                    </Card>\n                </div>\n            </Collapse> : undefined}\n            {(postLoadingFailed && postFailMessage) ?\n                <Alert severity=\"error\">{formatMessage(\"posts/loading_failed\", postFailMessage)}</Alert>\n                : (currentPosts && (!props.userId || userInfoOthers) ? (<React.Fragment>\n                    <PostListView posts={currentPosts.posts}/>\n                    <Hidden smUp={true}>\n                        <PageChangeControl\n                            large={false}\n                            current={currentPage}\n                            max={Math.max(1, Math.ceil(currentPosts.total / Constants[\"post-per-page\"]))}\n                            onClick={(pageNumber) => {\n                                setPage(pageNumber);\n                            }}\n                        />\n                    </Hidden>\n                    <Hidden xsDown={true}>\n                        <div className={classes.middle}>\n                            <Pagination count={Math.max(1, Math.ceil(currentPosts.total / Constants[\"post-per-page\"]))}\n                                        page={currentPage}\n                                        onChange={(evt, value) => {\n                                            setPage(value);\n                                        }}/>\n                        </div>\n                    </Hidden>\n                </React.Fragment>) : <React.Fragment>\n                    <Skeleton animation=\"wave\" height={20}/>\n                    <Skeleton animation=\"wave\" height={20}/>\n                    <Skeleton animation=\"wave\" height={20}/>\n                    <Skeleton animation=\"wave\" height={20}/>\n                    <Skeleton animation=\"wave\" height={20}/>\n                    <Skeleton animation=\"wave\" height={20}/>\n                </React.Fragment>)}\n        </Container>\n    </React.Fragment>;\n}\n","import React from \"react\";\nimport {Button, Container, createStyles, TextField, Typography, useTheme} from \"@material-ui/core\";\nimport {formatMessage, Strings} from \"../strings\";\nimport {useSelector} from \"react-redux\";\nimport {Link} from \"react-router-dom\";\nimport {Store, tokenSlice} from \"../store\";\nimport {PostListViewPage} from \"./post_list_page\";\n\nfunction UnloggedInPage(props: any) {\n    return <Container maxWidth=\"sm\" style={{\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: \"center\",\n    }}>\n        <Typography variant=\"h6\" component=\"h1\">{Strings[\"main/welcome_title\"]}</Typography>\n        <Typography variant=\"body1\">{Strings[\"main/welcome_content\"]}</Typography>\n        <Button variant=\"contained\"\n                component={Link}\n                to=\"/login\"\n                color=\"primary\"\n                style={{\n                    marginTop: \"16px\",\n                }}\n        >{Strings[\"login/login\"]}</Button>\n    </Container>;\n}\n\nexport function HomePage(props: {\n    location: {\n        search: string\n    }, history: any,\n}) {\n    const token = useSelector((store: Store) => store.token);\n    const [emptyState, setEmptyState] = React.useState(false);\n    React.useEffect(() => {\n        setEmptyState(!emptyState);\n    }, [props.location.search]);\n    let params = new URLSearchParams(props.location.search);\n    return token != null ?\n        <PostListViewPage history={props.history}\n                          userId={params.get(\"user_id\")}/>\n        : <UnloggedInPage/>;\n}","import {useDispatch, useSelector} from \"react-redux\";\nimport {Store, tokenSlice, userSlice} from \"../store\";\nimport React from \"react\";\nimport {logout, user} from \"../backend\";\nimport {Button, createStyles, IconButton, Typography, useTheme} from \"@material-ui/core\";\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport AccountCircleIcon from '@material-ui/icons/AccountCircle';\nimport {Strings} from \"../strings\";\nimport {Link} from \"react-router-dom\";\nimport {LocalUrls} from \"../urls\";\n\nconst useStyles = makeStyles((theme) => createStyles({\n    avatarIconButton: {\n        marginLeft: \"auto\",\n        fontSize: \"1em\",\n        transition: \"background-color ease-out 200ms\",\n        \"& .link\": {\n            color: theme.palette.primary.contrastText,\n            textDecoration: \"none\",\n        },\n        \"& .MuiButton-label\": {\n            fontSize: \"1.15em\",\n            alignItems: \"stretch\",\n        }\n    }\n}));\n\n/**\n * 顶端工具条右边的用户信息展示.\n */\nexport function UserBarInfo(props: any) {\n    const classes = useStyles(useTheme());\n    const token = useSelector((state: Store) => state.token);\n    const userInfo = useSelector((state: Store) => state.user);\n    const dispatch = useDispatch();\n    React.useEffect(() => {\n        if (token != null) {\n            user().then((result) => {\n                if (result.success) {\n                    dispatch(userSlice.actions.updateUserStatus(result.user));\n                } else {\n                    dispatch(userSlice.actions.updateUserStatus(null));\n                    if (!result.authorized) {\n                        logout(dispatch);\n                    }\n                }\n            }, (reason) => {\n                dispatch(userSlice.actions.updateUserStatus(null));\n            });\n        }\n    }, [token]);\n\n    return <span className={classes.avatarIconButton}>\n        <Button color=\"inherit\" component={Link} to={LocalUrls.user()}>\n            <AccountCircleIcon /><span>{userInfo ? userInfo.nickname : (token ? \"\" : Strings[\"main/not_logged_in\"])}</span>\n        </Button>\n    </span>\n}","import React from \"react\";\nimport {Eat, Parser} from 'remark-parse';\nimport {createStyles, makeStyles, useTheme} from \"@material-ui/core/styles\";\nimport {Strings} from \"../strings\";\n\nconst useStyles = makeStyles(theme => createStyles({\n    spoiler: {\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: \"flex-start\",\n        \"& .folded\": {\n            display: \"none\",\n        },\n        \"& .open\": {},\n        \"& .spoiler-content\": {\n            border: \"3px solid\",\n            borderColor: theme.palette.divider,\n            alignSelf: \"stretch\",\n        }\n    }\n}))\n\nfunction tokenizeSpoiler(eat: Eat, value: string, silent?: boolean): any {\n    const match = /#\\(spoiler\\)((.|[\\r\\n])*?)\\(\\/spoiler\\)/.exec(value);\n    if (match) {\n        if (silent) {\n            return true;\n        }\n        try {\n            return eat(match[0])({\n                type: 'spoiler',\n                value: match[1]\n            });\n        } catch {\n        }\n    }\n}\n\ntokenizeSpoiler.notInLink = true;\ntokenizeSpoiler.locator = function (value: string, fromIndex: number) {\n    return value.indexOf('#(spoiler)', fromIndex);\n};\n\nfunction spoilerSyntax(this: any) {\n    const Parser = this.Parser as { prototype: Parser };\n    const tokenizers = Parser.prototype.inlineTokenizers;\n    const methods = Parser.prototype.inlineMethods;\n\n    // Add an inline tokenizer (defined in the following example).\n    tokenizers.spoiler = tokenizeSpoiler;\n\n    // Run it just before `text`.\n    methods.splice(methods.indexOf('text'), 0, 'spoiler');\n}\n\nfunction SpoilerView(props: { value: string }) {\n    const classes = useStyles(useTheme());\n    const [open, setOpen] = React.useState(false);\n    return <span className={classes.spoiler}>\n        <button //variant=\"contained\"\n            onClick={() => setOpen(!open)}>\n            {open ? Strings[\"post/fold_spoiler\"] : Strings[\"post/expand_spoiler\"]}\n        </button>\n        <span className={\"spoiler-content \" + (open ? \"open\" : \"folded\")}>\n            {props.value}\n        </span>\n    </span>;\n}\n\nexport {spoilerSyntax, SpoilerView};\n\n","\nexport const StickerDatabase: { [ns: string]: { \"url\": string, stickers: { [name: string]: { x: number, y: number, w: number, h: number } } } } = {\n    \"tieba\": {\n        \"url\": \"/stickers/tieba.png\",\n        \"stickers\": {\n            \"呵呵\": {\"x\": 0, \"y\": 0, \"w\": 30, \"h\": 30},\n            \"哈哈\": {\"x\": 0, \"y\": 30, \"w\": 30, \"h\": 30},\n            \"吐舌\": {\"x\": 0, \"y\": 60, \"w\": 30, \"h\": 30},\n            \"啊\": {\"x\": 0, \"y\": 90, \"w\": 30, \"h\": 30},\n            \"酷\": {\"x\": 0, \"y\": 120, \"w\": 30, \"h\": 30},\n            \"怒\": {\"x\": 0, \"y\": 150, \"w\": 30, \"h\": 30},\n            \"开心\": {\"x\": 0, \"y\": 180, \"w\": 30, \"h\": 30},\n            \"汗\": {\"x\": 0, \"y\": 210, \"w\": 30, \"h\": 30},\n            \"泪\": {\"x\": 0, \"y\": 240, \"w\": 30, \"h\": 30},\n            \"黑线\": {\"x\": 0, \"y\": 270, \"w\": 30, \"h\": 30},\n            \"鄙视\": {\"x\": 0, \"y\": 300, \"w\": 30, \"h\": 30},\n            \"不高兴\": {\"x\": 0, \"y\": 330, \"w\": 30, \"h\": 30},\n            \"真棒\": {\"x\": 0, \"y\": 360, \"w\": 30, \"h\": 30},\n            \"钱\": {\"x\": 0, \"y\": 390, \"w\": 30, \"h\": 30},\n            \"疑问\": {\"x\": 0, \"y\": 420, \"w\": 30, \"h\": 30},\n            \"阴险\": {\"x\": 0, \"y\": 450, \"w\": 30, \"h\": 30},\n            \"吐\": {\"x\": 0, \"y\": 480, \"w\": 30, \"h\": 30},\n            \"咦\": {\"x\": 0, \"y\": 510, \"w\": 30, \"h\": 30},\n            \"委屈\": {\"x\": 0, \"y\": 540, \"w\": 30, \"h\": 30},\n            \"花心\": {\"x\": 0, \"y\": 570, \"w\": 30, \"h\": 30},\n            \"呼~\": {\"x\": 0, \"y\": 600, \"w\": 30, \"h\": 30},\n            \"笑眼\": {\"x\": 0, \"y\": 630, \"w\": 30, \"h\": 30},\n            \"冷\": {\"x\": 0, \"y\": 660, \"w\": 30, \"h\": 30},\n            \"太开心\": {\"x\": 0, \"y\": 690, \"w\": 30, \"h\": 30},\n            \"滑稽\": {\"x\": 0, \"y\": 720, \"w\": 30, \"h\": 30},\n            \"勉强\": {\"x\": 0, \"y\": 750, \"w\": 30, \"h\": 30},\n            \"狂汗\": {\"x\": 0, \"y\": 780, \"w\": 30, \"h\": 30},\n            \"乖\": {\"x\": 0, \"y\": 810, \"w\": 30, \"h\": 30},\n            \"睡觉\": {\"x\": 0, \"y\": 840, \"w\": 30, \"h\": 30},\n            \"惊哭\": {\"x\": 0, \"y\": 870, \"w\": 30, \"h\": 30},\n            \"升起\": {\"x\": 0, \"y\": 900, \"w\": 30, \"h\": 30},\n            \"惊讶\": {\"x\": 0, \"y\": 930, \"w\": 30, \"h\": 30},\n            \"喷\": {\"x\": 0, \"y\": 960, \"w\": 30, \"h\": 30},\n            \"爱心\": {\"x\": 0, \"y\": 990, \"w\": 30, \"h\": 30},\n            \"心碎\": {\"x\": 0, \"y\": 1020, \"w\": 30, \"h\": 30},\n            \"玫瑰\": {\"x\": 0, \"y\": 1050, \"w\": 30, \"h\": 30},\n            \"礼物\": {\"x\": 0, \"y\": 1080, \"w\": 30, \"h\": 30},\n            \"彩虹\": {\"x\": 0, \"y\": 1110, \"w\": 30, \"h\": 30},\n            \"星星月亮\": {\"x\": 0, \"y\": 1140, \"w\": 30, \"h\": 30},\n            \"太阳\": {\"x\": 0, \"y\": 1170, \"w\": 30, \"h\": 30},\n            \"钱币\": {\"x\": 0, \"y\": 1200, \"w\": 30, \"h\": 30},\n            \"灯泡\": {\"x\": 0, \"y\": 1230, \"w\": 30, \"h\": 30},\n            \"茶杯\": {\"x\": 0, \"y\": 1260, \"w\": 30, \"h\": 30},\n            \"蛋糕\": {\"x\": 0, \"y\": 1290, \"w\": 30, \"h\": 30},\n            \"音乐\": {\"x\": 0, \"y\": 1320, \"w\": 30, \"h\": 30},\n            \"haha\": {\"x\": 0, \"y\": 1350, \"w\": 30, \"h\": 30},\n            \"胜利\": {\"x\": 0, \"y\": 1650, \"w\": 30, \"h\": 30},\n            \"大拇指\": {\"x\": 0, \"y\": 1410, \"w\": 30, \"h\": 30},\n            \"弱\": {\"x\": 0, \"y\": 1440, \"w\": 30, \"h\": 30},\n            \"OK\": {\"x\": 0, \"y\": 1470, \"w\": 30, \"h\": 30},\n            \"伤心\": {\"x\": 0, \"y\": 1500, \"w\": 30, \"h\": 30},\n            \"加油\": {\"x\": 0, \"y\": 1920, \"w\": 30, \"h\": 30},\n            \"必胜\": {\"x\": 0, \"y\": 1560, \"w\": 30, \"h\": 30},\n            \"期待\": {\"x\": 0, \"y\": 1590, \"w\": 30, \"h\": 30},\n            \"牛逼\": {\"x\": 0, \"y\": 1620, \"w\": 30, \"h\": 30},\n            \"跟丫死磕\": {\"x\": 0, \"y\": 1680, \"w\": 30, \"h\": 30},\n            \"踢球\": {\"x\": 0, \"y\": 1710, \"w\": 30, \"h\": 30},\n            \"面壁\": {\"x\": 0, \"y\": 1740, \"w\": 30, \"h\": 30},\n            \"顶\": {\"x\": 0, \"y\": 1770, \"w\": 30, \"h\": 30},\n            \"巴西怒\": {\"x\": 0, \"y\": 1800, \"w\": 30, \"h\": 30},\n            \"伴舞\": {\"x\": 0, \"y\": 1830, \"w\": 30, \"h\": 30},\n            \"奔跑\": {\"x\": 0, \"y\": 1860, \"w\": 30, \"h\": 30},\n            \"点赞手\": {\"x\": 0, \"y\": 1890, \"w\": 30, \"h\": 30},\n            \"哭泣\": {\"x\": 0, \"y\": 1950, \"w\": 30, \"h\": 30},\n            \"亮红牌\": {\"x\": 0, \"y\": 1980, \"w\": 30, \"h\": 30},\n            \"球迷\": {\"x\": 0, \"y\": 2010, \"w\": 30, \"h\": 30},\n            \"耶\": {\"x\": 0, \"y\": 2040, \"w\": 30, \"h\": 30},\n            \"转屁股\": {\"x\": 0, \"y\": 2070, \"w\": 30, \"h\": 30}\n        }\n    }\n}\n\nexport function stickerUrl(index: string): undefined | {\n    url: string,\n    x: number,\n    y: number,\n    w: number,\n    h: number,\n} {\n    const [ns, name] = index.split(\".\", 2);\n    if (StickerDatabase[ns] && StickerDatabase[ns].stickers[name]) {\n        return {url: StickerDatabase[ns].url, ...StickerDatabase[ns].stickers[name]}\n    }\n    return undefined;\n}","import React from \"react\";\nimport {Eat, Parser} from 'remark-parse';\nimport {createStyles, makeStyles, useTheme} from \"@material-ui/core/styles\";\nimport {Strings} from \"../strings\";\nimport {stickerUrl} from \"./sticker_indices\";\n\nconst useStyles = makeStyles(theme => createStyles({\n    spoiler: {\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: \"flex-start\",\n        \"& .folded\": {\n            display: \"none\",\n        },\n        \"& .open\": {},\n        \"& .spoiler-content\": {\n            border: \"3px solid\",\n            borderColor: theme.palette.divider,\n            alignSelf: \"stretch\",\n        }\n    }\n}))\n\nfunction tokenizeSticker(eat: Eat, value: string, silent?: boolean): any {\n    const match = /#\\(sticker:(.*?)\\)/.exec(value);\n    if (match) {\n        if (silent) {\n            return true;\n        }\n        try {\n            return eat(match[0])({\n                type: 'sticker',\n                value: match[1]\n            });\n        } catch {\n        }\n    }\n}\n\ntokenizeSticker.notInLink = true;\ntokenizeSticker.locator = function (value: string, fromIndex: number) {\n    return value.indexOf('#(sticker', fromIndex);\n};\n\nfunction stickerSyntax(this: any) {\n    const Parser = this.Parser as { prototype: Parser };\n    const tokenizers = Parser.prototype.inlineTokenizers;\n    const methods = Parser.prototype.inlineMethods;\n\n    // Add an inline tokenizer (defined in the following example).\n    tokenizers.sticker = tokenizeSticker;\n\n    // Run it just before `text`.\n    methods.splice(methods.indexOf('text'), 0, 'sticker');\n}\n\nfunction StickerView(props: { value: string }) {\n    const stickerPath = stickerUrl(props.value);\n    const stickerAlt = `#(sticker:${props.value})`;\n    return stickerPath ? <span style={{\n            display: \"inline-block\",\n            width: `${stickerPath.w}px`,\n            height: `${stickerPath.h}px`,\n            lineHeight: `${stickerPath.h}px`,\n            background: `url(\"${stickerPath.url}\") no-repeat ${-stickerPath.x}px ${-stickerPath.y}px`,\n        }}/>\n        : <React.Fragment>{stickerAlt}</React.Fragment>;\n}\n\nexport {stickerSyntax, StickerView};\n","import React from \"react\";\nimport {createStyles, makeStyles, useTheme} from \"@material-ui/core/styles\";\nimport {Strings} from \"../strings\";\n\nconst useStyles = makeStyles(theme => createStyles({\n    \"imageContainer\": {\n        lineHeight: \"0\",\n    },\n    \"imageContainerClose\": {\n        height: \"300px\",\n        overflow: \"hidden\",\n    },\n    \"imageContainerOversize\": {\n        border: \"1px 1px 0 1px solid\",\n        borderColor: theme.palette.divider,\n    },\n    \"imageOpenControl\": {\n        height: \"1.5em\",\n        background: theme.palette.background.default,\n        borderStyle: \"solid\",\n        borderWidth: \"1px 0 0 0\",\n        borderColor: theme.palette.divider,\n        cursor: \"pointer\",\n        alignSelf: \"stretch\",\n    },\n    \"list\": {\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: \"center\",\n        maxWidth: \"max-content\",\n        border: \"1px solid\",\n        borderColor: theme.palette.divider,\n    }\n}))\n\n/**\n * 图片显示组件.\n * @param props <img> 的 props\n * @constructor\n */\nexport function ImageView(props: {\n    src?: string,\n    alt?: string,\n    title?: string,\n}) {\n    const [overSize, setOverSize] = React.useState(false);\n    const [open, setOpen] = React.useState(false);\n    const classes = useStyles(useTheme());\n    return <span className={classes.list}>\n        <span className={classes.imageContainer + ((overSize && !open) ? \" \" + classes.imageContainerClose : \"\")}>\n            <img className={\"image-view\"} src={props.src} onLoad={(evt) => {\n                let imageElement: HTMLImageElement = evt.target as HTMLImageElement;\n                if (imageElement.height && imageElement.width && (imageElement.height / imageElement.width) > 2) {\n                    setOverSize(true);\n                }\n            }} alt={props.alt} title={props.title}/>\n        </span>\n        {overSize ? <span className={classes.imageOpenControl} onClick={() => setOpen(!open)}>\n            {open ? Strings[\"post/fold_image\"] : Strings[\"post/expand_image\"]}\n        </span> : undefined}\n    </span>\n}\n","import React from \"react\";\nimport SyntaxHighlighter from \"react-syntax-highlighter\";\nimport {vs} from \"react-syntax-highlighter/dist/esm/styles/hljs\";\nimport {createStyles, makeStyles, useTheme} from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles((theme) => createStyles({\n    code: {\n        //boxShadow: \"1px 1px 3px black\",\n        // borderRadius: \"3px\",\n        // borderStyle: \"solid\",\n        // borderColor: theme.palette.divider,\n        overflow: \"auto\",\n        //backgroundColor: theme.palette.background.default,\n        //margin: theme.spacing(1, 0),\n    },\n}));\n\nexport function CodeView(props: {\n    language: string,\n    value: string,\n}) {\n    const theme = useTheme();\n    const classes = useStyles(theme);\n    return <div className={classes.code}>\n        <SyntaxHighlighter language={props.language} style={vs} customStyle={{\n            backgroundColor: \"#f5f5f5\",\n        }}>\n            {props.value || \"\"}\n        </SyntaxHighlighter>\n    </div>\n}","import React from \"react\";\nimport {Eat, Parser} from 'remark-parse';\n\nfunction tokenizeUnderline(eat: Eat, value: string, silent?: boolean): any {\n    const match = /\\+\\+(.*?)\\+\\+/.exec(value);\n    if (match) {\n        if (silent) {\n            return true;\n        }\n        try {\n            return eat(match[0])({\n                type: 'underline',\n                value: match[1]\n            });\n        } catch {\n        }\n    }\n}\n\ntokenizeUnderline.notInLink = true;\ntokenizeUnderline.locator = function (value: string, fromIndex: number) {\n    return value.indexOf('++', fromIndex);\n};\n\nfunction underlineSyntax(this: any) {\n    const Parser = this.Parser as { prototype: Parser };\n    const tokenizers = Parser.prototype.inlineTokenizers;\n    const methods = Parser.prototype.inlineMethods;\n\n    // Add an inline tokenizer (defined in the following example).\n    tokenizers.underline = tokenizeUnderline;\n\n    // Run it just before `text`.\n    methods.splice(methods.indexOf('text'), 0, 'underline');\n}\n\nfunction UnderlineView(props: { value: string }) {\n    return <u>{props.value}</u>\n}\n\nexport {underlineSyntax, UnderlineView};\n","import {spoilerSyntax, SpoilerView} from \"./spoiler_syntax\";\nimport {stickerSyntax, StickerView} from \"./sticker_syntax\";\nimport {ImageView} from \"./image_view\";\nimport {CodeView} from \"./code_view\";\nimport ReactMarkdown from \"react-markdown\";\nimport React from \"react\";\nimport {underlineSyntax, UnderlineView} from \"./underline_syntax\";\n\n/**\n * React-Markdown 的二次包装，添加了所需要的插件.\n */\nexport function MarkdownView(props: {\n    escapeHTML?: boolean\n    source: string\n} | any) {\n    return <ReactMarkdown escapeHtml={props.escapeHTML}\n                          className=\"custom-html-style\"\n                          plugins={[spoilerSyntax, stickerSyntax, underlineSyntax]}\n                          renderers={{\n                              image: ImageView,             // 处理长图\n                              imageReference: ImageView,    // 处理长图\n                              code: CodeView,               // 高亮代码     ``` ```\n                              spoiler: SpoilerView,         // 可折叠文本    #(spoiler)文本(/spoiler)\n                              sticker: StickerView,         // 表情       #(sticker:tieba.haha)\n                              underline: UnderlineView,     // ++下划线++\n                          }}\n                          {...props}\n    />\n}","import React from \"react\";\nimport {Avatar, Button, ButtonGroup, Container, createStyles, Divider, Typography, useTheme} from \"@material-ui/core\";\nimport {post, PostFull, Reply} from \"../backend\";\nimport {Store, tokenSlice} from \"../store\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport {Alert, Skeleton} from \"@material-ui/lab\";\nimport {Strings} from \"../strings\";\nimport {TimeView} from \"../utils/time_view\";\nimport {Link} from \"react-router-dom\";\nimport {LocalUrls} from \"../urls\";\nimport {ToolbarButtonGroup} from \"../utils/shared_components\";\nimport {MarkdownView} from \"../rich_text/markdown_view\";\nimport EditIcon from \"@material-ui/icons/Edit\";\nimport RefreshIcon from \"@material-ui/icons/Refresh\";\nimport MessageIcon from \"@material-ui/icons/MessageOutlined\";\nimport FavoriteIcon from '@material-ui/icons/Favorite';\nimport FavoriteBorderIcon from '@material-ui/icons/FavoriteBorder';\nimport ReplyIcon from '@material-ui/icons/Reply';\nimport VisibilityOutlinedIcon from '@material-ui/icons/VisibilityOutlined';\nimport VisibilityOffOutlinedIcon from '@material-ui/icons/VisibilityOffOutlined';\nimport CheckBoxOutlineBlankOutlinedIcon from '@material-ui/icons/CheckBoxOutlineBlankOutlined';\nimport CheckBoxOutlinedIcon from '@material-ui/icons/CheckBoxOutlined';\nimport {blue, red} from \"@material-ui/core/colors\";\nimport {\n    createHistoryEntryFromPostFull,\n    hasFavorites,\n    pushFavorites,\n    pushViewHistory,\n    removeFavorites\n} from \"../utils/utils\";\n\nconst useStyles = makeStyles(theme => createStyles({\n    \"main\": {\n        paddingBottom: theme.spacing(5),\n    },\n    \"postContent\": {\n        display: \"flex\",\n        alignItems: \"stretch\",\n        \"& .userInfo\": {\n            display: \"flex\",\n            flexDirection: \"row\",\n            alignItems: \"center\",\n            textOverflow: \"ellipse\",\n            textDecoration: \"none\",\n        },\n        \"& .userInfo a, & .userInfo a:active\": {\n            color: theme.palette.text.primary,\n            textDecoration: \"none\",\n        },\n        \"& .userInfo .MuiButton-root\": {\n            display: \"inline-block\",\n            textAlign: \"center\",\n            width: \"calc(4em + 20px)\",\n        },\n        \"& .userInfo .name_time\": {\n            fontSize: \"16px\",\n        },\n        \"& .userInfo .time\": {\n            display: \"flex\",\n            flexWrap: \"wrap\",\n        },\n        \"& .userInfo .MuiAvatar-root\": {\n            color: theme.palette.getContrastText(blue[700]),\n            backgroundColor: blue[700],\n            display: \"flex\",\n            alignItems: \"center\",\n            justifyContent: \"center\",\n            marginRight: theme.spacing(1),\n            marginLeft: theme.spacing(-0.5),\n            width: theme.spacing(4),\n            height: theme.spacing(4),\n            fontSize: theme.spacing(2),\n        },\n        \"& .userInfo .MuiAvatar-root:active\": {\n            color: theme.palette.getContrastText(blue[700]),\n        },\n        \"& .content-container\": {\n            display: \"flex\",\n            flexDirection: \"row\",\n            \"& .vbar\": {\n                borderWidth: \"0 0 0 2px\",\n                borderColor: theme.palette.divider,\n                marginLeft: theme.spacing(1),\n                paddingRight: \"2px\",\n                borderStyle: \"solid\",\n            },\n            \"& .vbar:hover\": {\n                borderColor: theme.palette.primary.main,\n            },\n        },\n        \"& .content\": {\n            position: \"relative\",\n            width: \"0\",\n            flex: \"1 auto\",\n            paddingLeft: theme.spacing(1),\n            display: \"flex\",\n            flexDirection: \"column\",\n            alignItems: \"stretch\",\n            justifyContent: \"space-between\",\n            boxSizing: \"border-box\",\n        },\n        flexDirection: \"column\",\n        \"& .mainContent\": {\n            width: \"100%\",\n            position: \"relative\",\n            \"minHeight\": \"2em\",\n            \"& .md-editor-markdown\": {\n                padding: \"10px\",\n            },\n            overflow: \"hidden\",\n            overflowX: \"auto\",\n            \"& img\": {\n                maxWidth: \"100%\",\n            }\n        },\n        \"& .bar\": {\n            width: \"100%\",\n            maxHeight: \"max-content\",\n            display: \"flex\",\n            justifyContent: \"flex-end\",\n            whiteSpace: \"nowrap\",\n            flexWrap: \"wrap\",\n            color: theme.palette.text.secondary,\n        },\n        \"& .post-button-bar\": {\n            display: \"flex\",\n            marginTop: theme.spacing(1),\n            flexWrap: \"wrap\",\n            justifyContent: \"flex-start\",\n            fontSize: \"0.8em\",\n            alignItems: \"center\",\n        },\n        \"& .floor-number\": {\n            marginLeft: \"auto\",\n            color: theme.palette.text.secondary,\n        },\n        \"& .post-button:visited\": {},\n        \"&.main\": {\n            padding: theme.spacing(2),\n            background: theme.palette.background.paper,\n            borderRadius: theme.spacing(1),\n            boxShadow: \"0 0 3px rgba(0, 0, 0, 0.3)\"\n        },\n        \"&.reply\": {\n            marginTop: theme.spacing(1),\n        },\n        width: \"100%\",\n        boxSizing: \"border-box\",\n    },\n    \"postButton\": {\n        marginRight: \"1ch\",\n        color: theme.palette.primary.main,\n        textDecoration: \"underline\",\n        cursor: \"pointer\",\n    },\n    \"reply\": {\n        boxSizing: \"border-box\",\n        \"& .subReply\": {\n            marginLeft: theme.spacing(5),\n        },\n    },\n    \"subReplyList\": {\n        \"&:hover\": {\n            borderColor: theme.palette.primary.main,\n        },\n    },\n    \"replyListControlBar\": {\n        \"& .MuiButton-root\": {},\n        marginBottom: theme.spacing(1),\n    },\n    \"inFloorReply\": {\n        marginLeft: \"20px\",\n        marginRight: \"10px\",\n        \"& .MuiListItem-root\": {\n            flexDirection: \"column\",\n            alignItems: \"stretch\",\n            borderWidth: \"0 1px 1px 1px\",\n            borderColor: theme.palette.divider,\n            borderStyle: \"solid\",\n        },\n        \"& .MuiListItem-root:nth-child(1)\": {\n            borderWidth: \"1px 1px 1px 1px\",\n        }\n    },\n    \"buttonBar\": {\n        display: \"flex\",\n        \"& .MuiButtonGroup-root:nth-child(1)\": {\n            marginRight: \"auto\",\n            marginLeft: \"0\",\n        },\n        \"& .favorite\": {\n            color: red[500],\n        },\n        flexWrap: \"wrap\",\n        alignItems: \"center\",\n        marginBottom: theme.spacing(2),\n    },\n}));\n\n/**\n * 展平回复列表.\n * @param subReplies 一级回复列表\n * @param replyTreeMap 回复树\n * @param base 用于递归的临时参数\n */\nfunction flattenReplies(subReplies: Reply[], replyTreeMap: { [id: number]: Reply[] }, base?: Reply[]) {\n    let base1 = base || [];\n    for (let reply of subReplies) {\n        base1.push(reply);\n        let children = replyTreeMap[reply.id];\n        if (children) {\n            flattenReplies(children, replyTreeMap, base1);\n        }\n    }\n    return base1;\n}\n\n/**\n * 展示回复.\n * @param props.level 层级\n * @param props.subReplies 一级子回复\n * @param props.replyTreeMap 回复树\n * @param props.allReplies 回复的 id 到对象映射\n * @param props.main 是否是主贴\n * @param props.reply 回复/主贴\n * @param props.selfFlatten 是否需要展平\n * @param props.repliedName 展平后，回复的目标昵称\n */\nfunction ReplyView(props: {\n    level: number,\n    subReplies: Reply[],\n    replyTreeMap: { [id: number]: Reply[] },\n    allReplies: { [id: number]: Reply },\n} & ({ reply: Reply, main: false, title: string } | { reply: PostFull, main: true, posterOnly: boolean })\n    & ({ selfFlatten: true, repliedName: string } | { selfFlatten: false })) {\n    const classes = useStyles(useTheme());\n    const userId = useSelector((store: Store) => store.user)?.id || -1;\n    const [displayHTML, setDisplayHTML] = React.useState(true);\n    const [displayLength, setDisplayLength] = React.useState(props.level < 3 ? 5 : 0);\n    const flatten = props.level >= 2 || props.selfFlatten;\n    const [subReplies, setSubReplies] = React.useState(flatten ? [] : props.subReplies);\n    React.useEffect(() => {\n        if (flatten) {\n            setSubReplies(flattenReplies(props.subReplies, props.replyTreeMap));\n        }\n    }, [props.level, props.subReplies, props.replyTreeMap]);\n\n    return <React.Fragment>\n        <div className={classes.postContent + (props.main ? \" main\" : \" reply\")}\n             id={(props.main ? \"post-main\" : props.reply.id.toString())}>\n\n            {/*用户信息*/}\n            <div className=\"userInfo\">\n                <Avatar component={Link}\n                        to={LocalUrls.user(props.reply.userId)}>{props.reply.nickname.substring(0, 1)}</Avatar>\n                <span className=\"name_time\">\n                    <Typography component={Link} to={LocalUrls.user(props.reply.userId)}\n                                variant=\"body1\">{props.reply.nickname}</Typography>\n                    <Typography variant=\"body2\" component=\"div\" className=\"time\">\n                        <span>{Strings[\"post/create_time\"]}:&nbsp;<TimeView time={props.reply.created}/>&nbsp;</span>\n                        <span>{props.reply.created !== props.reply.updated ? <React.Fragment>\n                            {Strings[\"post/update_time\"]}:&nbsp;<TimeView time={props.reply.updated}/>\n                        </React.Fragment> : undefined}</span>\n                    </Typography>\n                </span>\n            </div>\n\n            {/*主体内容*/}\n            <div className=\"content-container\">\n                <span className=\"vbar\" onClick={() => {\n                    setDisplayLength(displayLength > 0 ? 0 : Math.min(5, props.subReplies.length))\n                }}/>\n                <span className=\"content\">\n                    {(props.selfFlatten && props.repliedName && !props.main) ?\n                        <Typography variant=\"body2\"\n                                    component=\"a\"\n                                    href={`#${props.reply.replyId}`}>\n                            {Strings[\"post/reply_to\"].replace(\"{nickname}\", props.repliedName)}\n                            {`(#${props.reply.replyId})`}\n                        </Typography>\n                        : undefined}\n                    <div className=\"mainContent\">\n                        <MarkdownView source={props.reply.content}\n                                      escapeHtml={!displayHTML}\n                        />\n                    </div>\n                    <span className=\"post-button-bar\">\n                        {userId === props.reply.userId ?\n                            <Button\n                                className=\"post-button\"\n                                component={Link}\n                                to={props.main ? {\n                                    pathname: LocalUrls.editPost(props.reply.id),\n                                    state: {\n                                        \"initialTitle\": props.reply.title,\n                                        \"initialContent\": props.reply.content,\n                                    }\n                                } : {\n                                    pathname: LocalUrls.editReply(props.reply.postId, props.reply.id),\n                                    state: {\n                                        \"initialTitle\": Strings[\"reply_edit/title_prefix\"].replace(\"{title}\", props.title),\n                                        \"initialContent\": props.reply.content,\n                                    }\n                                }}\n                            >\n                                <EditIcon/>{Strings[\"post/edit\"]}\n                            </Button>\n                            : undefined}\n                        <Button\n                            component={Link}\n                            className=\"post-button\"\n                            to={props.main ? {\n                                pathname: LocalUrls.replyToPost(props.reply.id),\n                                state: {\n                                    \"initialTitle\": Strings[\"reply_edit/title_prefix\"].replace(\"{title}\", props.reply.title),\n                                }\n                            } : {\n                                pathname: LocalUrls.replyToReply(props.reply.postId, props.reply.id),\n                                state: {\n                                    \"initialTitle\": Strings[\"reply_edit/title_prefix\"].replace(\"{title}\", props.title),\n                                }\n                            }}\n                        >\n                            <ReplyIcon/>{Strings[\"post/reply\"]}\n                        </Button>\n                        {props.reply.content.match(/<[a-zA-Z]+.*?>/) ? <Button\n                            className=\"post-button\"\n                            onClick={() => {\n                                setDisplayHTML(!displayHTML);\n                            }}\n                        >\n                            {displayHTML ? <VisibilityOutlinedIcon/> : <VisibilityOffOutlinedIcon/>}\n                            {displayHTML ? Strings[\"post/hide_html\"] : Strings[\"post/show_html\"]}\n                        </Button> : undefined}\n                        {props.main ?\n                            (props.posterOnly ?\n                                    <Button component={Link}\n                                            to={LocalUrls.post(props.reply.id, false)}>\n                                        <CheckBoxOutlinedIcon/>{Strings[\"post/poster_only\"]}</Button> :\n                                    <Button component={Link}\n                                            to={LocalUrls.post(props.reply.id, true)}>\n                                        <CheckBoxOutlineBlankOutlinedIcon/>{Strings[\"post/poster_only\"]}</Button>\n                            )\n                            : undefined}\n                        <Typography variant=\"body1\" component=\"span\" className=\"floor-number\">\n                            {props.main ? \"\" : `#${props.reply.id}`}\n                        </Typography>\n                    </span>\n                    <Divider/>\n                    {subReplies.length ? <React.Fragment>\n                        <span className={classes.subReplyList}>\n                            {subReplies.slice(0, displayLength).map((value, index) => (\n                                <React.Fragment key={index}>\n                                    <ReplyView selfFlatten={flatten}\n                                               allReplies={props.allReplies}\n                                               repliedName={(!props.main && value.replyId !== props.reply.id)\n                                                   ? props.allReplies[value.replyId]?.nickname || \"\"\n                                                   : \"\"}\n                                               main={false} reply={value} level={props.level + 1}\n                                               subReplies={flatten ? [] : (props.replyTreeMap[value.id] || [])}\n                                               replyTreeMap={props.replyTreeMap}\n                                               title={props.main ? props.reply.title : props.title}/>\n                                </React.Fragment>\n                            ))}\n                        </span>\n                    </React.Fragment> : undefined}\n                </span>\n            </div>\n            <ButtonGroup className={classes.replyListControlBar}>\n                {displayLength < subReplies.length ?\n                    <Button variant=\"outlined\" color=\"primary\" onClick={() => {\n                        setDisplayLength(Math.min(displayLength + 10, subReplies.length));\n                    }}>{Strings[\"post/more_replies\"]}{`(${subReplies.length - displayLength})`}</Button> : undefined\n                }\n                {displayLength > 0 && subReplies.length > 0 ?\n                    <Button variant=\"outlined\" color=\"primary\" component=\"a\" onClick={() => {\n                        setDisplayLength(0);\n                    }}\n                            href={props.main ? \"#post-main\" : `#${props.reply.id}`}>{Strings[\"post/fold_replies\"]}</Button> : undefined\n                }\n            </ButtonGroup>\n        </div>\n    </React.Fragment>;\n}\n\n/**\n * 展示帖子详情.\n * @param props 帖子详情\n */\nfunction PostView(props: PostFull & { posterOnly: boolean }) {\n    const classes = useStyles(useTheme());\n    const replyTreeMap: { [id: number]: Reply[] } = {};\n    if (props.reply) {\n        props.reply.forEach((reply) => {\n            if (reply.replyId) {\n                if (!replyTreeMap[reply.replyId]) {\n                    replyTreeMap[reply.replyId] = [reply];\n                } else {\n                    replyTreeMap[reply.replyId].push(reply);\n                }\n            }\n        })\n    }\n    let replies: any[] = [<ReplyView level={0} posterOnly={props.posterOnly} main={true} reply={props}\n                                     selfFlatten={false}\n                                     replyTreeMap={replyTreeMap}\n                                     allReplies={props.reply.reduce((prev, reply) => {\n                                         prev[reply.id] = reply;\n                                         return prev;\n                                     }, {} as { [id: number]: Reply })}\n                                     subReplies={props.reply.reduce((arr, reply) => {\n                                         if (reply.replyId === 0) {\n                                             arr.push(reply);\n                                         }\n                                         return arr;\n                                     }, [] as Reply[])} key={0}/>];\n    return <React.Fragment>\n        <Typography variant=\"h4\" component=\"h1\">{props.title}</Typography>\n        <hr/>\n        {replies}\n    </React.Fragment>;\n}\n\n/**\n * 帖子详情展示页面.\n */\nexport function PostPage(props: {\n    match: {\n        params: {\n            postId: string,\n        }\n    },\n    location: {\n        search: string,\n    },\n    history: any,\n}) {\n    let [message, setMessage] = React.useState(null as string | null);\n    let [postInfo, setPostInfo] = React.useState(null as PostFull | null);\n    const token = useSelector((store: Store) => store.token);\n    const dispatch = useDispatch();\n    const classes = useStyles(useTheme());\n    const postId = parseInt(props.match.params.postId);\n    let [favorite, setFavorite] = React.useState(hasFavorites(postId));\n    const params = new URLSearchParams(props.location.search);\n    const loadPost = () => {\n        setMessage(null);\n        setPostInfo(null);\n        post(postId).then((result) => {\n            if (result.success) {\n                setMessage(null);\n                setPostInfo(params.get(\"posterOnly\") ? {\n                    ...result.post,\n                    reply: result.post.reply ? result.post.reply.reduce((arr, value, index) => {\n                        if (value.userId === result.post.userId) {\n                            arr.push(value);\n                        }\n                        return arr;\n                    }, [] as Reply[]) : [],\n                } : result.post);\n                pushViewHistory(createHistoryEntryFromPostFull(result.post));\n            } else {\n                setMessage(result.message);\n                if (!result.authorized) {\n                    dispatch(tokenSlice.actions.setToken(null));\n                    props.history.push(\"/\");\n                }\n            }\n        }, reason => {\n            setMessage(reason.toString());\n        })\n    }\n    React.useEffect(() => {\n        loadPost();\n    }, [postId, props.location.search]);\n    return <Container className={classes.main} maxWidth=\"lg\">\n        <div className={classes.buttonBar}>\n            <ToolbarButtonGroup history={props.history}/>\n            {postInfo != null ?\n                (<ButtonGroup>\n                    <Button variant=\"outlined\" onClick={loadPost}><RefreshIcon/>{Strings[\"main/refresh\"]}</Button>\n                    <Button variant=\"outlined\" component={Link}\n                            to={{\n                                pathname: LocalUrls.replyToPost(postId),\n                                state: {\n                                    \"initialTitle\": Strings[\"reply_edit/title_prefix\"]\n                                        .replace(\"{title}\", postInfo.title),\n                                }\n                            }}><MessageIcon/>{Strings[\"post/reply\"]}</Button>\n                    <Button variant=\"outlined\" onClick={() => {\n                        if (favorite) {\n                            removeFavorites(postId);\n                            setFavorite(false);\n                        } else if (postInfo) {\n                            pushFavorites(createHistoryEntryFromPostFull(postInfo));\n                            setFavorite(true);\n                        }\n                    }}>{favorite ? <FavoriteIcon className=\"favorite\"/> : <FavoriteBorderIcon className=\"favorite\"/>}\n                        {Strings[\"main/favorite\"]}\n                    </Button>\n                </ButtonGroup>) : undefined}\n        </div>\n        {\n            postInfo ? <PostView {...postInfo} posterOnly={!!params.get(\"posterOnly\")}/> :\n                message ?\n                    <Alert severity=\"error\">\n                        {message}\n                    </Alert>\n                    : <React.Fragment>\n                        <Skeleton animation=\"wave\"/>\n                        <Skeleton animation=\"wave\"/>\n                        <Skeleton animation=\"wave\"/>\n                    </React.Fragment>\n        }\n    </Container>\n}","import React from \"react\";\nimport {Button, createStyles, Divider, List, ListItem, ListItemIcon, ListItemText, useTheme} from \"@material-ui/core\";\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport {useSelector} from \"react-redux\";\nimport {Store} from \"../store\";\nimport {Link} from \"react-router-dom\";\nimport {LocalUrls, Urls} from \"../urls\";\nimport AccountCircleIcon from \"@material-ui/icons/AccountCircle\";\nimport ViewListIcon from '@material-ui/icons/ViewList';\nimport EditIcon from '@material-ui/icons/Edit';\nimport HistoryIcon from '@material-ui/icons/History';\nimport FavoriteIcon from '@material-ui/icons/Favorite';\nimport PersonIcon from '@material-ui/icons/Person';\nimport InfoIcon from '@material-ui/icons/Info';\nimport {Strings} from \"../strings\";\n\nconst drawerWidth = 240;\n\nconst useStyles = makeStyles(theme => createStyles({\n    list: {\n        width: drawerWidth,\n    },\n    drawerHeader: {\n        display: 'flex',\n        alignItems: 'center',\n        padding: theme.spacing(0, 1),\n        // necessary for content to be below app bar\n        ...theme.mixins.toolbar,\n        justifyContent: 'center',\n    },\n    verticalCenter: {\n        display: \"flex\",\n        alignItems: \"center\",\n    }\n}));\n\nexport function DrawerContents(props: any) {\n    const classes = useStyles(useTheme());\n    const userInfo = useSelector((store: Store) => store.user);\n    return <React.Fragment>\n        <div className={classes.drawerHeader}>\n            <Button color=\"inherit\" component={Link} to={LocalUrls.user()}>\n                <span className={classes.verticalCenter}>\n                    {userInfo ?\n                        <React.Fragment><PersonIcon fontSize=\"small\"/>{userInfo.nickname}</React.Fragment>\n                        : (Strings[\"main/not_logged_in\"])}\n                </span>\n            </Button>\n        </div>\n        <Divider/>\n        <List className={classes.list}>\n            {userInfo ?\n                <React.Fragment>\n                    <ListItem button component={Link} to={LocalUrls.postList()}>\n                        <ListItemIcon><ViewListIcon/></ListItemIcon>\n                        <ListItemText primary={Strings[\"main/drawer/post_list\"]}/>\n                    </ListItem>\n                    <ListItem button component={Link} to={LocalUrls.createPost()}>\n                        <ListItemIcon><EditIcon/></ListItemIcon>\n                        <ListItemText primary={Strings[\"main/drawer/submit_post\"]}/>\n                    </ListItem>\n                    <Divider/>\n                    <ListItem button component={Link} to={LocalUrls.user()}>\n                        <ListItemIcon><AccountCircleIcon/></ListItemIcon>\n                        <ListItemText primary={Strings[\"main/drawer/user_center\"]}/>\n                    </ListItem>\n                    <ListItem button component={Link} to={LocalUrls.postList(userInfo.id)}>\n                        <ListItemIcon><ViewListIcon/></ListItemIcon>\n                        <ListItemText primary={Strings[\"main/drawer/self_post_list\"]}/>\n                    </ListItem>\n                    <ListItem button component={Link} to={LocalUrls.viewHistory()}>\n                        <ListItemIcon><HistoryIcon/></ListItemIcon>\n                        <ListItemText primary={Strings[\"main/drawer/history\"]}/>\n                    </ListItem>\n                    <ListItem button component={Link} to={LocalUrls.favorites()}>\n                        <ListItemIcon><FavoriteIcon/></ListItemIcon>\n                        <ListItemText primary={Strings[\"main/drawer/favorite\"]}/>\n                    </ListItem>\n                    <Divider/>\n                    <ListItem button component={Link} to={LocalUrls.about()}>\n                        <ListItemIcon><InfoIcon/></ListItemIcon>\n                        <ListItemText primary={Strings[\"main/drawer/about\"]}/>\n                    </ListItem>\n                </React.Fragment>\n                : <React.Fragment>\n                    <ListItem button component={Link} to={LocalUrls.login()}>\n                        <ListItemIcon><AccountCircleIcon/></ListItemIcon>\n                        <ListItemText primary={Strings[\"main/drawer/login\"]}/>\n                    </ListItem>\n                </React.Fragment>}\n        </List>\n    </React.Fragment>\n}","import React from \"react\";\nimport {Button, ButtonGroup, Container} from \"@material-ui/core\";\nimport {Strings} from \"../strings\";\nimport {PagedPostsView, PostListView} from \"../post/post_list_view\";\nimport {GoBack, GoHome, ToolbarButtonGroup} from \"../utils/shared_components\";\nimport {clearHistory, createPostDigestFromHistoryEntry, getViewHistory} from \"../utils/utils\";\n\nexport function HistoryPostView(props: {}) {\n    const historyList = getViewHistory();\n    // 没有用，单纯是为了刷新显示\n    const [historyStatus, setHistoryStatus] = React.useState(true);\n    return <React.Fragment>\n        <div>{Strings[\"history/title\"].replace(\"{count}\", historyList.length.toString())}&nbsp;\n            {historyList.length > 0 ?\n                <Button\n                    color=\"secondary\"\n                    variant=\"outlined\"\n                    onClick={() => {\n                        clearHistory();\n                        setHistoryStatus(!historyStatus);\n                    }}\n                >\n                    {Strings[\"history/clear_history\"]}\n                </Button> : undefined}\n        </div>\n        <PagedPostsView posts={historyList.map(createPostDigestFromHistoryEntry)}/>\n    </React.Fragment>\n}\n\n/**\n * 用户浏览历史页.\n * @constructor\n */\nexport function HistoryPage(props: { history: any }) {\n    return <Container maxWidth=\"lg\">\n        <ToolbarButtonGroup history={props.history} marginBottom={true}/>\n        <HistoryPostView/>\n    </Container>;\n}","import React from \"react\";\nimport {Strings} from \"../strings\";\nimport {Container, Typography} from \"@material-ui/core\";\nimport {PagedPostsView} from \"../post/post_list_view\";\nimport {ToolbarButtonGroup} from \"../utils/shared_components\";\nimport {createPostDigestFromHistoryEntry, getFavoritesList} from \"../utils/utils\";\n\n/**\n * 用户收藏页.\n * @constructor\n */\nexport function FavoritesPage(props: { history: any }) {\n    const favoriteList = getFavoritesList();\n    return <Container maxWidth=\"lg\">\n        <ToolbarButtonGroup history={props.history} marginBottom={true}/>\n        <div>{Strings[\"favorite/title\"].replace(\"{count}\", favoriteList.length.toString())}</div>\n        {favoriteList.length ?\n            <PagedPostsView posts={favoriteList.map(createPostDigestFromHistoryEntry)}/>\n            : <Typography variant=\"h6\" component=\"p\">{Strings[\"favorite/no_favorite\"]}</Typography>}\n    </Container>\n}","import React from \"react\";\nimport GitHubIcon from '@material-ui/icons/GitHub';\nimport HomeIcon from '@material-ui/icons/Home';\nimport MailIcon from '@material-ui/icons/Mail';\nimport {ToolbarButtonGroup} from \"../utils/shared_components\";\nimport {Container, Divider, List, ListItem, ListItemIcon, ListItemText, Typography} from \"@material-ui/core\";\n\nexport function AboutPage(props: {\n    history: any,\n}) {\n    return <Container maxWidth=\"md\">\n        <ToolbarButtonGroup history={props.history} marginBottom={true}/>\n        <Typography variant=\"h4\" component=\"h1\">清软论坛前端</Typography>\n        <Typography variant=\"body1\" component=\"p\">By: Rhacoal</Typography>\n        <List>\n            <Divider/>\n            <ListItem button component=\"a\" href={\"https://github.com/Rhacoal\"}>\n                <ListItemIcon><GitHubIcon/></ListItemIcon>\n                <ListItemText\n                    primary={\"GitHub\"}\n                    secondary={\"https://github.com/Rhacoal\"}\n                />\n            </ListItem>\n            <Divider/>\n            <ListItem button component=\"a\" href={\"https://rhacoal.com/\"}>\n                <ListItemIcon><HomeIcon/></ListItemIcon>\n                <ListItemText\n                    primary={\"(空空如也的)个人主页\"}\n                    secondary={\"https://rhacoal.com/\"}\n                />\n            </ListItem>\n            <Divider/>\n            <ListItem button component=\"a\" href={\"mailto:rhacoal@gmail.com\"}>\n                <ListItemIcon><MailIcon/></ListItemIcon>\n                <ListItemText\n                    primary={\"邮箱\"}\n                    secondary={\"rhacoal@gmail.com\"}\n                />\n            </ListItem>\n            <Divider/>\n        </List>\n    </Container>\n}","import React from \"react\";\nimport {Container, createStyles, Typography, useTheme} from \"@material-ui/core\";\nimport {ToolbarButtonGroup} from \"../utils/shared_components\";\nimport RemoveCircleOutlineOutlinedIcon from '@material-ui/icons/RemoveCircleOutlineOutlined';\nimport {makeStyles} from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles(theme => createStyles({\n    \"main\": {\n        display: \"flex\",\n        alignItems: \"center\",\n        flexDirection: \"column\",\n        \"& .alert\": {\n            fontSize: \"128px\",\n            color: theme.palette.error.main,\n        },\n        \"& .margin\": {\n            margin: theme.spacing(2, 0),\n        }\n    }\n}))\n\nexport function PageNotFoundPage(props: {\n    history: any\n}) {\n    const classes = useStyles(useTheme());\n    return <Container maxWidth=\"lg\">\n        <div className={classes.main}>\n            <RemoveCircleOutlineOutlinedIcon className=\"alert\" fontSize=\"inherit\"/>\n            <Typography variant=\"h4\" component=\"h1\" className=\"margin\">页面不存在</Typography>\n            <ToolbarButtonGroup history={props.history}/>\n        </div>\n    </Container>\n}","import React from \"react\";\nimport MdEditor, {Plugins} from 'react-markdown-editor-lite'\nimport InsertEmoticonIcon from '@material-ui/icons/InsertEmoticon';\nimport {StickerDatabase, stickerUrl} from \"./sticker_indices\";\nimport {makeStyles} from \"@material-ui/core/styles\";\n\nconst useDropMenuStyles = makeStyles({\n    dropMenuWrap: {\n        display: \"block\",\n        \"&.hidden\": {\n            display: \"none !important\",\n        },\n        position: \"absolute\",\n        right: \"-150px\",\n        top: \"28px\",\n        zIndex: 2,\n        minWidth: \"20px\",\n        padding: \"10px 0\",\n        textAlign: \"center\",\n        backgroundColor: \"#fff\",\n        border: \"1px solid #f1f1f1\",\n        borderRightColor: \"#ddd\",\n        borderBottomColor: \"#ddd\",\n    }\n});\n\nfunction Drop(props: {\n    show: boolean,\n    onClose?: () => any,\n    children: any,\n}) {\n    const classes = useDropMenuStyles();\n    const handleClose = React.useCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n        e.stopPropagation();\n        const {onClose} = props;\n        if (typeof onClose === 'function') {\n            onClose();\n        }\n    }, []);\n    return (\n        <div className={`${classes.dropMenuWrap} ${props.show ? 'show' : 'hidden'}`} onClick={handleClose}>\n            {props.children}\n        </div>\n    );\n}\n\n\nconst useStyles = makeStyles({\n    stickerPreview: {\n        display: \"inline-flex\",\n        width: \"60px\",\n        height: \"60px\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n        \"&:hover\": {\n            backgroundColor: \"#eee\",\n        }\n    }\n});\n\nfunction StickerPlugin(props: {\n    editor: MdEditor\n}) {\n    const classes = useStyles();\n    const [open, setOpen] = React.useState(false);\n\n    const handleClick = () => {\n        setOpen(!open);\n    }\n\n    return (\n        <span\n            className=\"button button-type-sticker\"\n            title=\"表情\"\n            onClick={handleClick}\n            style={{\n                display: \"flex\",\n                alignItems: \"center\",\n                position: \"relative\",\n            }}\n            onMouseEnter={() => setOpen(true)}\n            onMouseLeave={() => setOpen(false)}\n        >\n            <InsertEmoticonIcon style={{\n                lineHeight: \"28px\",\n                fontSize: \"18px\",\n            }}/>\n            <Drop show={open} onClose={() => setOpen(false)}>\n                <div style={{\n                    width: \"320px\",\n                    display: \"flex\",\n                    flexWrap: \"wrap\",\n                    height: \"400px\",\n                    overflow: \"auto\",\n                }}>{Object.entries(StickerDatabase['tieba'].stickers).map(([key, value]) => {\n                    return <span key={`tieba.${key}`} className={classes.stickerPreview} onClick={() => {\n                        props.editor.insertText(`#(sticker:tieba.${key})`)\n                    }}>\n                        <span style={{\n                            display: \"inline-block\",\n                            width: `${value.w}px`,\n                            height: `${value.h}px`,\n                            lineHeight: `${value.h}px`,\n                            background: `url(\"${StickerDatabase['tieba'].url}\") no-repeat ${-value.x}px ${-value.y}px`,\n                        }}/>\n                    </span>;\n                })}</div>\n            </Drop>\n    </span>\n    );\n}\n\nStickerPlugin.align = 'left';\nStickerPlugin.pluginName = 'sticker';\n\nexport {StickerPlugin};","import React from \"react\";\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport MdEditor from \"react-markdown-editor-lite\";\nimport UnfoldMoreIcon from '@material-ui/icons/UnfoldMore';\n\nfunction SpoilerPlugin(props: {\n    editor: MdEditor\n}) {\n    return (\n        <span\n            className=\"button button-type-sticker\"\n            title=\"可折叠内容\"\n            onClick={() => {\n                props.editor.insertText(`#(spoiler)${props.editor.getSelection().text}(/spoiler)`, true)\n            }}\n            style={{\n                display: \"flex\",\n                alignItems: \"center\",\n            }}\n        >\n            <UnfoldMoreIcon style={{\n                lineHeight: \"28px\",\n                fontSize: \"18px\",\n            }}/>\n    </span>\n    );\n}\n\nSpoilerPlugin.align = 'left';\nSpoilerPlugin.pluginName = 'spolier';\n\nexport {SpoilerPlugin};","import React from \"react\";\nimport {Button, createStyles, TextField, Typography, useTheme} from \"@material-ui/core\";\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport {Strings} from \"../strings\";\nimport MdEditor, {Plugins} from 'react-markdown-editor-lite'\nimport 'react-markdown-editor-lite/lib/index.css';\nimport {MarkdownView} from \"../rich_text/markdown_view\";\nimport {StickerPlugin} from \"../rich_text/sticker_plugin\";\nimport {SpoilerPlugin} from \"../rich_text/spoiler_plugin\";\n\nMdEditor.unuse(Plugins.FullScreen);\nMdEditor.use(StickerPlugin);\nMdEditor.use(SpoilerPlugin);\n\nconst useStyles = makeStyles(theme => createStyles({\n    postCreate: {\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: \"stretch\",\n        \"& .MuiTextField-root\": {\n            marginTop: theme.spacing(1),\n        },\n        margin: theme.spacing(1, 0),\n    },\n    submitButtons: {\n        display: \"flex\",\n        justifyContent: \"flex-end\",\n        marginTop: theme.spacing(1),\n    },\n}));\n\nexport function PostEditor(props: {\n    h1?: string,\n    initialTitle: string,\n    titleEditable?: boolean,\n    height?: number,\n    initialContent: string,\n    onFinish?: (title: string, content: string) => any,\n}) {\n    let [[title, content], setTempContent] = React.useState([\n        props.initialTitle, props.initialContent]);\n    const classes = useStyles(useTheme());\n    React.useEffect(() => {\n        setTempContent([props.initialTitle, props.initialContent]);\n    }, [props.initialTitle, props.initialContent]);\n    const canSubmit = () => (!props.titleEditable || title !== \"\");\n    const handleSubmitClick = () => {\n        if (canSubmit() && props.onFinish) {\n            props.onFinish(title, content);\n        }\n    }\n\n    return <div className={classes.postCreate}>\n        <Typography variant=\"h4\" component=\"h1\">{props.h1 || Strings[\"post_create/create_post\"]}</Typography>\n        <TextField value={title}\n                   disabled={!props.titleEditable}\n                   onChange={(evt) => {\n                       setTempContent([evt.target.value, content])\n                   }}\n                   placeholder={Strings[\"post_create/placeholder_title\"]}\n        />\n        <MdEditor\n            value={content}\n            style={{ height: \"500px\" }}\n            renderHTML={(text) => (\n                <MarkdownView source={text} escapeHTML={false}/>\n            )}\n            onChange={({html, text}) => {\n                setTempContent([title, text]);\n            }}\n        />\n        <div className={classes.submitButtons}>\n            <Button variant=\"contained\" color=\"primary\"\n                    onClick={handleSubmitClick}>{Strings[\"post_create/submit\"]}</Button>\n        </div>\n    </div>;\n}\n","import {useDispatch, useSelector} from \"react-redux\";\nimport {Store, tokenSlice} from \"../store\";\nimport React from \"react\";\nimport {Container} from \"@material-ui/core\";\nimport {GoBack} from \"../utils/shared_components\";\nimport {editPost, editReply, replyPost, submitPost} from \"../backend\";\nimport {LocalUrls} from \"../urls\";\nimport {Alert} from \"@material-ui/lab\";\nimport {PostEditor} from \"./post_editor\";\nimport {Strings} from \"../strings\";\n\n/**\n * 发帖页面.\n */\nexport function PostSubmitPage(props: any) {\n    const token = useSelector((store: Store) => store.token);\n    const [message, setMessage] = React.useState(null as string | null);\n    const dispatch = useDispatch();\n    return <Container maxWidth=\"lg\">\n        <GoBack history={props.history}/>\n        <PostEditor titleEditable={true} initialContent={\"\"} initialTitle={\"\"} onFinish={(title, content) => {\n            submitPost(title, content).then(result => {\n                if (result.success) {\n                    props.history.push(LocalUrls.post(result.postId));\n                    setMessage(null);\n                } else {\n                    if (!result.authorized) {\n                        dispatch(tokenSlice.actions.setToken(null));\n                        props.history.push(\"/\");\n                    }\n                    setMessage(result.message);\n                }\n            }, reason => {\n                setMessage(reason.toString());\n            })\n        }}/>\n        {message ? <Alert severity=\"error\">{message}</Alert> : undefined}\n    </Container>\n}\n\n/**\n * 编辑帖子页面.\n */\nexport function PostEditPage(props: {\n    match: {\n        params: {\n            postId: string,\n        }\n    },\n    location: {\n        state: {\n            initialTitle: string,\n            initialContent: string,\n        }\n    },\n    history: any,\n}) {\n    const token = useSelector((store: Store) => store.token);\n    const [message, setMessage] = React.useState(null as string | null);\n    const dispatch = useDispatch();\n    return <Container maxWidth=\"lg\">\n        <GoBack history={props.history}/>\n        <PostEditor h1={Strings[\"post/edit\"]}\n                    titleEditable={true} initialTitle={props.location?.state?.initialTitle || \"\"}\n                    initialContent={props.location?.state?.initialContent || \"\"} onFinish={(title, content) => {\n            editPost(parseInt(props.match.params.postId), title, content).then(result => {\n                if (result.success) {\n                    props.history.push(LocalUrls.post(props.match.params.postId));\n                    setMessage(null);\n                } else {\n                    if (!result.authorized) {\n                        dispatch(tokenSlice.actions.setToken(null));\n                        props.history.push(\"/\");\n                    }\n                    setMessage(result.message);\n                }\n            }, reason => {\n                setMessage(reason.toString());\n            })\n        }}/>\n        {message ? <Alert severity=\"error\">{message}</Alert> : undefined}\n    </Container>\n}\n\n/**\n * 编辑回复页面.\n */\nexport function ReplyEditPage(props: {\n    match: {\n        params: {\n            postId: string,\n            replyId: string,\n        }\n    },\n    location: {\n        state: {\n            initialTitle: string,\n            initialContent: string,\n        }\n    },\n    history: any,\n}) {\n    const token = useSelector((store: Store) => store.token);\n    const [message, setMessage] = React.useState(null as string | null);\n    const dispatch = useDispatch();\n    return <Container maxWidth=\"lg\">\n        <GoBack history={props.history}/>\n        <PostEditor h1={Strings[\"post/edit\"]}\n                    titleEditable={false} initialTitle={props.location?.state?.initialTitle || \"\"}\n                    initialContent={props.location?.state?.initialContent || \"\"} onFinish={(title, content) => {\n            editReply(parseInt(props.match.params.postId), parseInt(props.match.params.replyId), content).then(result => {\n                if (result.success) {\n                    props.history.push(LocalUrls.post(props.match.params.postId));\n                    setMessage(null);\n                } else {\n                    if (!result.authorized) {\n                        dispatch(tokenSlice.actions.setToken(null));\n                        props.history.push(\"/\");\n                    }\n                    setMessage(result.message);\n                }\n            }, reason => {\n                setMessage(reason.toString());\n            })\n        }}/>\n        {message ? <Alert severity=\"error\">{message}</Alert> : undefined}\n    </Container>\n}\n\n/**\n * 回复页面\n * @param props\n * @constructor\n */\nexport function ReplyPage(props: {\n    match: {\n        params: {\n            postId: string,\n            replyId?: string,\n        }\n    },\n    location: {\n        state: {\n            initialTitle: string,\n        }\n    },\n    history: any,\n}) {\n    const token = useSelector((store: Store) => store.token);\n    const [message, setMessage] = React.useState(null as string | null);\n    const dispatch = useDispatch();\n    return <Container maxWidth=\"lg\">\n        <GoBack history={props.history}/>\n        <PostEditor h1={Strings[\"post/reply\"]}\n                    titleEditable={false}\n                    initialTitle={props.location?.state?.initialTitle || \"\"}\n                    initialContent={\"\"} onFinish={(title, content) => {\n            replyPost(parseInt(props.match.params.postId),\n                parseInt(props.match?.params?.replyId || \"0\"), content)\n                .then(result => {\n                    if (result.success) {\n                        props.history.push(LocalUrls.post(props.match.params.postId));\n                        setMessage(null);\n                    } else {\n                        if (!result.authorized) {\n                            dispatch(tokenSlice.actions.setToken(null));\n                            props.history.push(\"/\");\n                        }\n                        setMessage(result.message);\n                    }\n                }, reason => {\n                    setMessage(reason.toString());\n                })\n        }}/>\n        {message ? <Alert severity=\"error\">{message}</Alert> : undefined}\n    </Container>\n}","import \"normalize.css/normalize.css\";\nimport React from \"react\";\nimport ReactDOM from 'react-dom';\nimport {createMuiTheme, Theme, AppBar, Toolbar, IconButton, Typography, ThemeProvider, Drawer} from \"@material-ui/core\";\nimport {Strings} from \"./strings\";\nimport {LoginPage} from \"./user/login_page\";\nimport {BrowserRouter, Route, Switch} from 'react-router-dom';\nimport {HomePage} from \"./mainpage/homepage\";\nimport {Provider} from \"react-redux\";\nimport {store} from \"./store\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport {UserBarInfo} from \"./user/user_bar_view\";\nimport {PostPage} from \"./post/post_detail_page\";\nimport {UserInfoPage} from \"./user/user_page\";\nimport {DrawerContents} from \"./mainpage/drawer\";\nimport {HistoryPage} from \"./user/history_page\";\nimport {FavoritesPage} from \"./user/favorites_page\";\nimport {AboutPage} from \"./about/about\";\nimport {PageNotFoundPage} from \"./page_not_found/page_not_found\";\nimport {PostEditPage, PostSubmitPage, ReplyEditPage, ReplyPage} from \"./post/post_edit_pages\";\n\nclass App extends React.Component<{}, { drawerOpen: boolean }> {\n    theme: Theme;\n\n    constructor(props: {}) {\n        super(props);\n        this.theme = createMuiTheme();\n        this.state = {\n            drawerOpen: false,\n        };\n    }\n\n    render(): React.ReactNode {\n        return (\n            <ThemeProvider theme={this.theme}>\n                <div style={{\n                    color: this.theme.palette.text.primary,\n                    backgroundColor: this.theme.palette.background.default, \"minHeight\": \"100%\"\n                }}>\n                    <BrowserRouter>\n                        <AppBar position=\"fixed\">\n                            <Toolbar>\n                                <IconButton color=\"inherit\"\n                                            aria-label=\"open drawer\"\n                                            onClick={() => this.setState({drawerOpen: true})}\n                                            edge=\"start\"\n                                            style={{\n                                                marginRight: this.theme.spacing(2),\n                                            }}\n                                >\n                                    <MenuIcon/>\n                                </IconButton>\n                                <Typography variant=\"h6\" color=\"inherit\">\n                                    {Strings[\"main/title\"]}\n                                </Typography>\n                                <UserBarInfo/>\n                            </Toolbar>\n                        </AppBar>\n                        <Toolbar/>\n\n                        <Drawer anchor=\"left\" open={this.state.drawerOpen}\n                                onClose={() => this.setState({drawerOpen: false})}>\n                            <div onClick={() => this.setState({drawerOpen: false})}>\n                                <DrawerContents />\n                            </div>\n                        </Drawer>\n\n                        <div style={{height: this.theme.spacing(1)}}/>\n                        <div style={{overflow: \"auto\", height: `calc(100vh - ${64 + this.theme.spacing(2)}px)`}}>\n                            <Switch>\n                                <Route exact path=\"/\" component={HomePage}/>\n                                <Route path='/login' component={LoginPage}/>\n                                <Route path='/submit-post' component={PostSubmitPage}/>\n                                <Route path='/edit-post/:postId' component={PostEditPage}/>\n                                <Route path='/edit-reply/:postId/:replyId' component={ReplyEditPage}/>\n                                <Route path='/reply/:postId/:replyId?' component={ReplyPage}/>\n                                <Route path='/post/:postId' component={PostPage}/>\n                                <Route path='/user/:userId?' component={UserInfoPage}/>\n                                <Route path='/history' component={HistoryPage}/>\n                                <Route path='/favorites' component={FavoritesPage}/>\n                                <Route path='/about' component={AboutPage}/>\n                                <Route component={PageNotFoundPage}/>\n                            </Switch>\n                        </div>\n                        <div style={{height: this.theme.spacing(1)}}/>\n                    </BrowserRouter>\n                </div>\n            </ThemeProvider>\n        );\n    }\n}\n\nReactDOM.render(\n    (<Provider store={store}><App/></Provider>),\n    document.getElementById('root')\n);\n"],"sourceRoot":""}